// <auto-generated />
using System;
using AIMathProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIMathProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250326020448_UpdateEntities")]
    partial class UpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIMathProject.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("chapter_name");

                    b.Property<short?>("ChapterOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("chapter_order");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<short?>("Grade")
                        .HasColumnType("smallint")
                        .HasColumnName("grade");

                    b.Property<short?>("Semester")
                        .HasColumnType("smallint")
                        .HasColumnName("semester");

                    b.HasKey("ChapterId")
                        .HasName("PK__Chapter__745EFE872B223990");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SupportAgentId")
                        .HasColumnType("int")
                        .HasColumnName("support_agent_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ChatId")
                        .HasName("PK__Chat__FD040B17113CE11E");

                    b.HasIndex("SupportAgentId");

                    b.HasIndex("UserId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<string>("MessageContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message_content");

                    b.Property<string>("MessageDirection")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("message_direction");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MessageId")
                        .HasName("PK__Chat_Mes__0BBF6EE6ED8C769F");

                    b.HasIndex("ChatId");

                    b.ToTable("Chat_Message", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ChoiceAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Content")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("content");

                    b.Property<string>("ImgUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("img_url")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("PK__Choice_A__337243182E7DD80B");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choice_Answer", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("comment_content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__E79576871A9F4F74");

                    b.HasIndex("LessonId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<decimal?>("AvgScore")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("avg_score");

                    b.Property<short?>("EndYear")
                        .HasColumnType("smallint")
                        .HasColumnName("end_year");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<short?>("Grade")
                        .HasColumnType("smallint")
                        .HasColumnName("grade");

                    b.Property<short?>("Semester")
                        .HasColumnType("smallint")
                        .HasColumnName("semester");

                    b.Property<short?>("StartYear")
                        .HasColumnType("smallint")
                        .HasColumnName("start_year");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__Enrollme__6D24AA7A57661DB0");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ErrorReport", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("error_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("error_message");

                    b.Property<string>("ErrorType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("unknown")
                        .HasColumnName("error_type");

                    b.Property<bool?>("Resolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("resolved");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ErrorId")
                        .HasName("PK__Error_Re__DA71E16CBE836E35");

                    b.HasIndex("UserId");

                    b.ToTable("Error_Report", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("exercise_name");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.HasKey("ExerciseId")
                        .HasName("PK__Exercise__C121418E1118BA51");

                    b.HasIndex("LessonId");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseDetail", b =>
                {
                    b.Property<int>("ExerciseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exercise_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseDetailId"));

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("ExerciseDetailId")
                        .HasName("PK__Exercise__CF31D69C1DFCFEF2");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Exercise_Detail", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseDetailResult", b =>
                {
                    b.Property<int>("ExerciseDetailResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exercise_detail_result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseDetailResultId"));

                    b.Property<int?>("ExerciseDetailId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_detail_id");

                    b.Property<int?>("ExerciseResultId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_result_id");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.HasKey("ExerciseDetailResultId")
                        .HasName("PK__Exercise__B2FE72291D9EB615");

                    b.HasIndex("ExerciseDetailId");

                    b.HasIndex("ExerciseResultId");

                    b.ToTable("Exercise_Detail_Result", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseResult", b =>
                {
                    b.Property<int>("ExerciseResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exercise_result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseResultId"));

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime")
                        .HasColumnName("done_at");

                    b.Property<int?>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("score");

                    b.HasKey("ExerciseResultId")
                        .HasName("PK__Exercise__AD9A3B0A3C6A7837");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Exercise_Result", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.FillAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correct_answer");

                    b.Property<short>("Position")
                        .HasColumnType("smallint")
                        .HasColumnName("position");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("PK__Fill_Ans__3372431814241484");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fill_Answer", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    b.Property<string>("LessonVideoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lesson_video_url");

                    b.Property<string>("LessonPdfUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lesson_pdf_url");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lesson_name");

                    b.Property<short?>("LessonOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("lesson_order");

                    b.HasKey("LessonId")
                        .HasName("PK__Lesson__6421F7BE8F73636D");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.LessonProgress", b =>
                {
                    b.Property<int>("LearningProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("learning_progress_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningProgressId"));

                    b.Property<int?>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<short?>("LearningProgress")
                        .HasColumnType("smallint")
                        .HasColumnName("learning_progress");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.HasKey("LearningProgressId")
                        .HasName("PK__Lesson_P__5BA9A40D0C38A3C3");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("Lesson_Progress", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.MatchingAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correct_answer");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("img_url");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("PK__Matching__337243182B53B279");

                    b.HasIndex("QuestionId");

                    b.ToTable("Matching_Answer", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("NotificationMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notification_message");

                    b.Property<string>("NotificationTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notification_title");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("unread")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FBF0CEF9F");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("payment_name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__ED1FC9EA63D5053C");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int")
                        .HasColumnName("duration_days");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("plan_name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("PlanId")
                        .HasName("PK__Plans__BE9F8F1D256113F1");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.PlanTransaction", b =>
                {
                    b.Property<int>("PlanTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plan_transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanTransactionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PlanTransactionId")
                        .HasName("PK__Plan_Tra__6A8B2E59818D54EC");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Plan_Transaction", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<short?>("Difficulty")
                        .HasColumnType("smallint")
                        .HasColumnName("difficulty");

                    b.Property<string>("ImgUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("img_url")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<string>("PdfSolution")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pdf_solution");

                    b.Property<string>("QuestionContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question_content");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("question_type");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__2EC21549ED70DA03");

                    b.HasIndex("LessonId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    b.Property<string>("TestName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("test_name");

                    b.HasKey("TestId")
                        .HasName("PK__Test__F3FF1C02CBA0D51C");

                    b.HasIndex("ChapterId");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestDetail", b =>
                {
                    b.Property<int>("TestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDetailId"));

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.HasKey("TestDetailId")
                        .HasName("PK__Test_Det__B8D23258609AEC20");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Test_Detail", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestDetailResult", b =>
                {
                    b.Property<int>("TestDetailResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_detail_result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDetailResultId"));

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int?>("TestDetailId")
                        .HasColumnType("int")
                        .HasColumnName("test_detail_id");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int")
                        .HasColumnName("test_result_id");

                    b.HasKey("TestDetailResultId")
                        .HasName("PK__Test_Det__37921712DC895AE5");

                    b.HasIndex("TestDetailId");

                    b.HasIndex("TestResultId");

                    b.ToTable("Test_Detail_Result", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultId"));

                    b.Property<short?>("CompletionTime")
                        .HasColumnType("smallint")
                        .HasColumnName("completion_time");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime")
                        .HasColumnName("done_at");

                    b.Property<int?>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("score");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.HasKey("TestResultId")
                        .HasName("PK__Test_Res__152BCEDA77BF0C91");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("TestId");

                    b.ToTable("Test_Result", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TokenPackage", b =>
                {
                    b.Property<int>("TokenPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenPackageId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("package_name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Tokens")
                        .HasColumnType("int")
                        .HasColumnName("tokens");

                    b.HasKey("TokenPackageId")
                        .HasName("PK__Token_Pa__F49422B17643D6F4");

                    b.ToTable("Token_Package", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TokenTransaction", b =>
                {
                    b.Property<int>("TokenTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenTransactionId"));

                    b.Property<int?>("Change")
                        .HasColumnType("int")
                        .HasColumnName("change");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<int?>("TokenPackageId")
                        .HasColumnType("int")
                        .HasColumnName("token_package_id");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("transaction_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TokenTransactionId")
                        .HasName("PK__Token_Tr__A3DC9D59D2E60AED");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TokenPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Token_Transaction", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiredAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Chat", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", "SupportAgent")
                        .WithMany("ChatSupportAgents")
                        .HasForeignKey("SupportAgentId")
                        .HasConstraintName("FK__Chat__support_ag__32AB8735");

                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Chat__user_id__31B762FC");

                    b.Navigation("SupportAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Chat_Mess__chat___367C1819");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ChoiceAnswer", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Question", "Question")
                        .WithMany("ChoiceAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Choice_An__quest__03F0984C");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Comments")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK__Comment__lesson___2DE6D218");

                    b.HasOne("AIMathProject.Domain.Entities.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comment__parent___2BFE89A6");

                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comment__user_id__2CF2ADDF");

                    b.Navigation("Lesson");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Enrollmen__user___6FE99F9F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ErrorReport", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("ErrorReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Error_Rep__user___41EDCAC5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Exercise__lesson__114A936A");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseDetail", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseDetails")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK__Exercise___exerc__14270015");

                    b.HasOne("AIMathProject.Domain.Entities.Question", "Question")
                        .WithMany("ExerciseDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Exercise___quest__151B244E");

                    b.Navigation("Exercise");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseDetailResult", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.ExerciseDetail", "ExerciseDetail")
                        .WithMany("ExerciseDetailResults")
                        .HasForeignKey("ExerciseDetailId")
                        .HasConstraintName("FK__Exercise___exerc__236943A5");

                    b.HasOne("AIMathProject.Domain.Entities.ExerciseResult", "ExerciseResult")
                        .WithMany("ExerciseDetailResults")
                        .HasForeignKey("ExerciseResultId")
                        .HasConstraintName("FK__Exercise___exerc__245D67DE");

                    b.Navigation("ExerciseDetail");

                    b.Navigation("ExerciseResult");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseResult", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("ExerciseResults")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Exercise___enrol__208CD6FA");

                    b.HasOne("AIMathProject.Domain.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseResults")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Exercise___exerc__1F98B2C1");

                    b.Navigation("Enrollment");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.FillAnswer", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Question", "Question")
                        .WithMany("FillAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Fill_Answ__quest__0A9D95DB");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Lesson__chapter___787EE5A0");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.LessonProgress", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("LessonProgresses")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Lesson_Pr__enrol__282DF8C2");

                    b.HasOne("AIMathProject.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonProgresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Lesson_Pr__lesso__2739D489");

                    b.Navigation("Enrollment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.MatchingAnswer", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Question", "Question")
                        .WithMany("MatchingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Matching___quest__07C12930");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Notification", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Notificat__user___3B40CD36");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.PlanTransaction", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Payment", "Payment")
                        .WithMany("PlanTransactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Plan_Tran__payme__6C190EBB");

                    b.HasOne("AIMathProject.Domain.Entities.Plan", "Plan")
                        .WithMany("PlanTransactions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Plan_Tran__plan___6B24EA82");

                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("PlanTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Plan_Tran__user___6A30C649");

                    b.Navigation("Payment");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Question", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Question__lesson__00200768");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Test", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Tests")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Test__chapter_id__7B5B524B");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestDetail", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Question", "Question")
                        .WithMany("TestDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Test_Deta__quest__0E6E26BF");

                    b.HasOne("AIMathProject.Domain.Entities.Test", "Test")
                        .WithMany("TestDetails")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK__Test_Deta__test___0D7A0286");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestDetailResult", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.TestDetail", "TestDetail")
                        .WithMany("TestDetailResults")
                        .HasForeignKey("TestDetailId")
                        .HasConstraintName("FK__Test_Deta__test___1BC821DD");

                    b.HasOne("AIMathProject.Domain.Entities.TestResult", "TestResult")
                        .WithMany("TestDetailResults")
                        .HasForeignKey("TestResultId")
                        .HasConstraintName("FK__Test_Deta__test___1CBC4616");

                    b.Navigation("TestDetail");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("TestResults")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Test_Resu__enrol__18EBB532");

                    b.HasOne("AIMathProject.Domain.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Test_Resu__test___17F790F9");

                    b.Navigation("Enrollment");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TokenTransaction", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.Payment", "Payment")
                        .WithMany("TokenTransactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Token_Tra__payme__6383C8BA");

                    b.HasOne("AIMathProject.Domain.Entities.TokenPackage", "TokenPackage")
                        .WithMany("TokenTransactions")
                        .HasForeignKey("TokenPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Token_Tra__token__628FA481");

                    b.HasOne("AIMathProject.Domain.Entities.User", "User")
                        .WithMany("TokenTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Token_Tra__user___619B8048");

                    b.Navigation("Payment");

                    b.Navigation("TokenPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMathProject.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AIMathProject.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Chat", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("ExerciseResults");

                    b.Navigation("LessonProgresses");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("ExerciseDetails");

                    b.Navigation("ExerciseResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseDetail", b =>
                {
                    b.Navigation("ExerciseDetailResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.ExerciseResult", b =>
                {
                    b.Navigation("ExerciseDetailResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Exercises");

                    b.Navigation("LessonProgresses");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Payment", b =>
                {
                    b.Navigation("PlanTransactions");

                    b.Navigation("TokenTransactions");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Plan", b =>
                {
                    b.Navigation("PlanTransactions");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Question", b =>
                {
                    b.Navigation("ChoiceAnswers");

                    b.Navigation("ExerciseDetails");

                    b.Navigation("FillAnswers");

                    b.Navigation("MatchingAnswers");

                    b.Navigation("TestDetails");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.Test", b =>
                {
                    b.Navigation("TestDetails");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestDetail", b =>
                {
                    b.Navigation("TestDetailResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TestResult", b =>
                {
                    b.Navigation("TestDetailResults");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.TokenPackage", b =>
                {
                    b.Navigation("TokenTransactions");
                });

            modelBuilder.Entity("AIMathProject.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatSupportAgents");

                    b.Navigation("ChatUsers");

                    b.Navigation("Comments");

                    b.Navigation("Enrollments");

                    b.Navigation("ErrorReports");

                    b.Navigation("Notifications");

                    b.Navigation("PlanTransactions");

                    b.Navigation("TokenTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
