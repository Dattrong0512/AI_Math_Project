{
  "openapi": "3.0.1",
  "info": {
    "title": "Math AI Api",
    "description": "\r\n            Test Login Accounts:\r\n            To test the login functionality, you can use the following test accounts:\r\n\r\n            Admin Account:\r\n            - **Email**: admin@example.com\r\n            - **Password**: Admin@123\r\n\r\n            User Account:\r\n            - **Email**: michael.brown@example.com\r\n            - **Password**: Michael@101\r\n\r\n            Use these credentials to log in and explore the API endpoints.\r\n        ",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Email",
      "email": "trongleviet05@gmail.com"
    },
    "license": {
      "name": "License",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/chapters": {
      "get": {
        "tags": [
          "Chapter"
        ],
        "summary": "Return all chapters of all class",
        "description": "*Only logged in users can use this api (including user and admin)*\r\n- **grade**: The grade level\r\n- **chapterOrder**: The order of the chapter in the curriculum.\r\n- **chapterName**: The name of the chapter.\r\n- **lessons**: Null, because this api just return information about grade and chapters, not include lessions in chapter",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChapterDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/chapters/details": {
      "get": {
        "tags": [
          "Chapter"
        ],
        "summary": "Returns detailed information of each lesson in the chapters",
        "description": "*Only logged in users can use this api (including user and admin)*\r\n- **grade**: The grade level\r\n- **chapterOrder**: The order of the chapter in the curriculum.\r\n- **semester**: semester\r\n- **chapterName**: The name of the chapter.\r\n- **lessons**: A list of lessons within the chapter. Each lesson includes:\r\n  - **lessonOrder**: The order of the lesson within the chapter.\r\n  - **lessonName**: The name of the lesson.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChapterDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/chapters/grade/{grade}/details": {
      "get": {
        "tags": [
          "Chapter"
        ],
        "summary": "Returns detailed information of each lesson in the chapters classified by class",
        "description": "*Only logged in users can use this api (including user and admin)*\r\n- **grade**: The grade level\r\n- **chapterOrder**: The order of the chapter in the curriculum.\r\n- **chapterName**: The name of the chapter.\r\n- **semester**: semester \r\n- **lessons**: A list of lessons within the chapter. Each lesson includes:\r\n  - **lessonOrder**: The order of the lesson within the chapter.\r\n  - **lessonName**: The name of the lesson.",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChapterDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/enrollment/id/{id}": {
      "get": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Retrieves all enrollment information for a specific user.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API retrieves enrollment records for a given user, including details such as grade, semester, and academic year.\r\n            \r\n**Request:**\r\nThe request should include:\r\n- **id** (int): The unique identifier of the user.\r\n            \r\n**Response:**\r\nThe response will return a list of enrollment records, each containing:\r\n- **enrollmentId**: The unique identifier of the enrollment.\r\n- **userId**: The unique identifier of the user.\r\n- **grade**: The grade level associated with the enrollment.\r\n- **enrollmentDate**: The date when the user enrolled.\r\n- **avgScore**: The average score of the user in this enrollment (nullable).\r\n- **semester**: The semester in which the user is enrolled.\r\n- **startYear**: The academic start year.\r\n- **endYear**: The academic end year.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /getinfo/id/10",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnrollmentDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/enrollment/current/{userId}": {
      "get": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Retrieves the current (most recent) enrollment for a specific user.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API retrieves the most recent enrollment record for a given user based on enrollment date.\r\n            \r\n**Request:**\r\nThe request should include:\r\n- **userId** (int): The unique identifier of the user.\r\n            \r\n**Response:**\r\nThe response will return the most recent enrollment record containing:\r\n- **enrollmentId**: The unique identifier of the enrollment.\r\n- **userId**: The unique identifier of the user.\r\n- **grade**: The grade level associated with the enrollment.\r\n- **enrollmentDate**: The date when the user enrolled.\r\n- **avgScore**: The average score of the user in this enrollment (nullable).\r\n- **semester**: The semester in which the user is enrolled.\r\n- **startYear**: The academic start year.\r\n- **endYear**: The academic end year.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /api/enrollment/current/10\r\n```",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/enrollment/update": {
      "put": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Updates an entire enrollment record.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API updates all fields of a specific enrollment record.\r\n\r\n**Request:**\r\nThe request should include the full `EnrollmentDto` object.\r\n\r\n**Response:**\r\nThe response will return a list of enrollment records, each containing:\r\n- **enrollmentId**: The unique identifier of the enrollment.\r\n- **userId**: The unique identifier of the user.\r\n- **grade**: The grade level associated with the enrollment.\r\n- **enrollmentDate**: The date when the user enrolled.\r\n- **avgScore**: The average score of the user in this enrollment (nullable).\r\n- **semester**: The semester in which the user is enrolled.\r\n- **startYear**: The academic start year.\r\n- **endYear**: The academic end year.\r\n\r\n**Example Request:**\r\n```http\r\nPUT /api/enrollment/update\r\nContent-Type: application/json\r\n{\r\n  \"enrollmentId\": 12,\r\n  \"userId\": 10,\r\n  \"grade\": 2,\r\n  \"enrollmentDate\": \"2024-08-22\",\r\n  \"avgScore\": 8.5,\r\n  \"semester\": 2,\r\n  \"startYear\": 2024,\r\n  \"endYear\": 2025\r\n}",
        "requestBody": {
          "description": "The updated enrollment object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/enrollment/create": {
      "post": {
        "tags": [
          "Enrollment"
        ],
        "summary": "Creates a new enrollment record.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API creates a new enrollment record for a user. If avgScore is not provided, it will default to 0.\r\n\r\n**Request:**\r\nThe request should include the `EnrollmentDto` object with required fields.\r\n\r\n**Response:**\r\nThe response will return the newly created enrollment record containing:\r\n- **enrollmentId**: The unique identifier of the new enrollment.\r\n- **userId**: The unique identifier of the user.\r\n- **grade**: The grade level associated with the enrollment.\r\n- **enrollmentDate**: The date when the user enrolled.\r\n- **avgScore**: The average score of the user in this enrollment (defaults to 0 if not provided).\r\n- **semester**: The semester in which the user is enrolled.\r\n- **startYear**: The academic start year.\r\n- **endYear**: The academic end year.\r\n\r\n**Example Request:**\r\n```http\r\nPOST /api/enrollment/create\r\nContent-Type: application/json\r\n{\r\n  \"userId\": 10,\r\n  \"semester\": 2,\r\n  \"grade\": 3,\r\n  \"startYear\": 2024,\r\n  \"endYear\": 2025\r\n}\r\n```",
        "requestBody": {
          "description": "The enrollment object to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/enrollment/{enrollmentId}/exercise/{exerciseId}/unlock": {
      "post": {
        "tags": [
          "EnrollmentUnlockExercise"
        ],
        "summary": "Unlocks a specific exercise for a user's enrollment by spending coins.",
        "description": "*Only logged-in users can access this API.*\r\nThis API unlocks a specific exercise for the given enrollment by spending 1 coin from the user's wallet.\r\n\r\n**Request Parameters:**\r\n- **enrollmentId** (int): The ID of the enrollment.\r\n- **exerciseId** (int): The ID of the exercise to unlock.\r\n\r\n/// **Example Request:**\r\n```http\r\nPOST api/enrollment/8/exercise/401/unlock\r\n```\r\n\r\n**Response Codes:**\r\n- **200 OK**: Successfully unlocked the exercise.\r\n- **400 Bad Request**: Unable to unlock the exercise (see message for details).\r\n- **401 Unauthorized**: User is not authorized.",
        "parameters": [
          {
            "name": "enrollmentId",
            "in": "path",
            "description": "The ID of the enrollment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exerciseId",
            "in": "path",
            "description": "The ID of the exercise to unlock",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/exercise/detail/enrollment/id/{id}/grade/{grade}": {
      "get": {
        "tags": [
          "Exercise"
        ],
        "summary": "Retrieves all locked exercises that have been unlocked for a specific enrollment.",
        "description": "*Only logged-in users (including user and admin) can access this API.*  \r\nThis API returns a list of premium exercises (IsLocked=true) that have been specifically unlocked for the given enrollment.\r\n            \r\n**Request Parameters:**  \r\n- **id** (int): The enrollment ID of the user.\r\n- **grade** (int): The grade level to filter exercises.\r\n            \r\n**Response Format:**  \r\nThe response will return a list of unlocked exercises, where each exercise includes:\r\n- **exerciseName** (string): The name of the exercise.\r\n- **exerciseId** (int): The unique identifier of the exercise.\r\n- **isLocked** (boolean): Will always be true, as these are unlocked premium exercises.\r\n- **description** (string): The description of the exercise.\r\n- **exerciseDetails** (array): List of exercise details, each containing:\r\n  - **question** (object): Complete question information, including:\r\n    - **questionId** (int): The unique identifier of the question.\r\n    - **questionType** (string): The type of question (e.g., \"multiple_choice\", \"fill_in_blank\", \"matching\").\r\n    - **difficulty** (int): The difficulty level of the question.\r\n    - **lessonId** (int): The ID of the associated lesson.\r\n    - **imgUrl** (string): The URL of an image related to the question.\r\n    - **questionContent** (string): The text content of the question.\r\n    - **pdfSolution** (string, nullable): A PDF solution reference, if available.\r\n    - **choiceAnswers** (array): List of multiple-choice answers (for \"multiple_choice\" questions).\r\n    - **fillAnswers** (array): List of fill-in answers (for \"fill_in_blank\" questions).\r\n    - **matchingAnswers** (array): List of matching answers (for \"matching\" questions).\r\n            \r\n**Example Request:**  \r\n\r\nGET /api/exercise/detail/enrollment/id/35/grade/1\r\n            \r\n**Response Codes:**  \r\n- **200 OK**: Successfully retrieved the unlocked exercises.\r\n- **400 Bad Request**: No unlocked exercises found for this enrollment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The enrollment ID of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "grade",
            "in": "path",
            "description": "The grade level to filter exercises.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/exercise/id/{exerciseId}/enrollment/id/{enrollmentId}": {
      "get": {
        "tags": [
          "Exercise"
        ],
        "summary": "Get exercise by ID with enrollment-specific lock status",
        "description": "*Authenticated users can access this API*\r\n\r\nThis API retrieves exercise data and checks if it's unlocked for a specific enrollment.\r\nIf the exercise is locked, it will return basic information without questions.\r\nIf unlocked, it will include all question details.\r\n\r\n**Parameters:**\r\n- **exerciseId**: The unique identifier of the exercise\r\n- **enrollmentId**: Optional enrollment ID to check unlock status",
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "description": "The unique identifier of the exercise",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enrollmentId",
            "in": "path",
            "description": "Optional enrollment ID to check unlock status",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the exercise data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the exercise is not found"
          },
          "401": {
            "description": "If the user is not authenticated"
          }
        }
      }
    },
    "/api/exercise/enrollment/id/{id}/chapter": {
      "get": {
        "tags": [
          "Exercise"
        ],
        "summary": "Retrieves all exercises with chapter information associated with a specific enrollment ID.",
        "description": "*Only logged-in users (including user and admin) can access this API, and this API is for AI support to suggest exercises user needs to improve*  \r\nThis API returns a list of exercises with chapter information for a given enrollment ID.\r\n            \r\n**Request Parameters:**  \r\n- **id** (int): The enrollment ID of the user.\r\n            \r\n**Response Format:**  \r\nThe response will return an array of exercises with the following structure:\r\n- **exerciseId** (int): The unique identifier of the exercise.\r\n- **exerciseName** (string): The name of the exercise.\r\n- **lesson** (object): Information about the lesson:\r\n  - **lessonName** (string): The name of the lesson.\r\n  - **chapter** (object): Information about the chapter:\r\n    - **chapterId** (int): The unique identifier of the chapter.\r\n    - **grade** (short): The grade level.\r\n    - **chapterOrder** (short): The order of the chapter.\r\n    - **chapterName** (string): The name of the chapter.\r\n    - **semester** (short): The semester number.\r\n- **exerciseResults** (array): List of exercise results:\r\n  - **score** (decimal): The score achieved for this exercise.\r\n  - **exerciseDetailResults** (array): List of detail results, each containing:\r\n    - **isCorrect** (boolean): Whether the answer was correct.\r\n    - **question** (object): Information about the question:\r\n      - **difficulty** (short): The difficulty level of the question.\r\n      - **imgUrl** (string, nullable): The URL of an image related to the question.\r\n      - **questionContent** (string): The text content of the question.\r\n            \r\n**Example Response:**  \r\n```json\r\n[\r\n  {\r\n    \"exerciseId\": 1,\r\n    \"exerciseName\": \"Bài tập Vị trí\",\r\n    \"lesson\": {\r\n      \"lessonName\": \"Vị trí\",\r\n      \"chapter\": {\r\n        \"chapterId\": 1,\r\n        \"grade\": 1,\r\n        \"chapterOrder\": 1,\r\n        \"chapterName\": \"Làm quen với một số hình\",\r\n        \"semester\": 1\r\n      }\r\n    },\r\n    \"exerciseResults\": [\r\n      {\r\n        \"score\": 7.5,\r\n        \"exerciseDetailResults\": [\r\n          {\r\n            \"isCorrect\": true,\r\n            \"question\": {\r\n              \"difficulty\": 1,\r\n              \"imgUrl\": \"https://example.com/image.png\",\r\n              \"questionContent\": \"Đây là biển báo cấm rẽ bên nào\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n            \r\n**Example Request:**  \r\n\r\nGET /api/exercise/with-chapter/enrollment/id/8\r\n            \r\n**Response Codes:**  \r\n- **200 OK**: Successfully retrieved the exercises with chapter information.  \r\n- **400 Bad Request**: No exercises found.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The enrollment ID of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExerciseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/exerciseresult/enrollment/id/{id}/exercise/id/{exerciseid}": {
      "post": {
        "tags": [
          "ExerciseDetailResult"
        ],
        "summary": "Creates or updates exercise detail results for a user's enrollment in a specific exercise.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API creates or updates the exercise detail results based on the user's answers.\r\n\r\n**Request Parameters:**\r\n- **id** (int): The enrollment ID of the user.\r\n- **exerciseid** (int): The exercise id of the exercise.\r\n- **edrDtoList** (List<ExerciseDetailResultDto>): List of exercise detail results. Each item should include:\r\n  - **questionId** (int): The unique identifier of the question being answered.\r\n  - **isCorrect** (bool): Whether the user's answer is correct or not.\r\n  - **questionType** (string): Type of the question (\"multiple_choice\", \"fill_in_blank\", \"matching\").\r\n  - **userChoiceAnswers** (array, nullable): For multiple_choices questions, contains the user's wrong answers:\r\n    - **answerId** (string): The incorrect answer id provided by the user.\r\n    - **isCorrect** (int): whether the answer is correct or not.\r\n  - **userFillAnswers** (array, optional): For fill_in_blank questions, contains user's wrong answers:\r\n    - **wrongAnswer** (string): The incorrect answer provided by the user.\r\n    - **position** (int): The position of the blank in the question.\r\n\r\n**Response Format:**\r\n- **200 OK**: If the exercise detail results are successfully created or updated, the response will be `true`.\r\n- **400 Bad Request**: If the operation fails, the response will contain an error message with details on the failure.\r\n\r\n**Example Request:**\r\n```http\r\nPOST /api/exerciseresult/enrollment/id/8/exercise/id/132\r\nContent-Type: application/json\r\n[\r\n  {\r\n    \"questionId\": 9,\r\n    \"isCorrect\": true,\r\n    \"questionType\": \"fill_in_blank\"  \r\n  },\r\n  {\r\n    \"questionId\": 10,\r\n    \"isCorrect\": false,\r\n    \"questionType\": \"fill_in_blank\",\r\n    \"userFillAnswers\": [\r\n      {\r\n        \"wrongAnswer\": \"750\",\r\n        \"position\": 1\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"questionId\": 11,\r\n    \"isCorrect\": true,\r\n    \"questionType\": \"multiple_choice\"\r\n  },\r\n  {\r\n    \"questionId\": 12,\r\n    \"isCorrect\": false,\r\n    \"questionType\": \"multiple_choice\",\r\n     \"userChoiceAnswers\": [\r\n       {\r\n         \"answerId\": \"22\",\r\n         \"isCorrect\": false\r\n       }\r\n     ]\r\n  },\r\n  {\r\n    \"questionId\": 13,\r\n    \"isCorrect\": true,\r\n    \"questionType\": \"fill_in_blank\"\r\n  }\r\n]\r\n```\r\n\r\n**Example Response (Success):**\r\n```json\r\nHTTP/1.1 200 OK\r\ntrue\r\n```",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exerciseid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExerciseDetailResultDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ExerciseResult"
        ],
        "summary": "Retrieves the exercise result details associated with a specific enrollment ID and exercise ID.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API returns the detailed information about an exercise result, including the questions and answers.\r\n\r\n**Request Parameters:**\r\n- **id** (int): The enrollment ID of the user.\r\n- **exerciseid** (int): The unique identifier of the exercise.\r\n\r\n**Response Format:**\r\nThe response will return the exercise result details, including:\r\n- **exerciseId** (int): The unique identifier of the exercise.\r\n- **enrollmentId** (int): The ID of the enrollment.\r\n- **score** (decimal, nullable): The score achieved for this exercise.\r\n- **doneAt** (datetime, nullable): The timestamp when the exercise was completed.\r\n- **exerciseDetailResults** (array): List of exercise detail results, each containing:\r\n  - **isCorrect** (bool, nullable): Whether the answer is correct or not.\r\n  - **questionType** (string): The type of question (\"multiple_choice\", \"fill_in_blank\", \"matching\").\r\n  - **userChoiceAnswers** (array, nullable): For multiple_choices questions, the user's wrong answers:\r\n    - **answerId** (string): The incorrect answer id provided by the user.\r\n    - **isCorrect** (int): whether the answer is correct or not.\r\n  - **userFillAnswers** (array, nullable): For fill_in_blank questions, the user's wrong answers:\r\n    - **wrongAnswer** (string): The incorrect answer provided by the user.\r\n    - **position** (int): The position of the blank in the question.\r\n  - **exerciseDetail** (object, nullable): Details about the exercise, including:\r\n    - **question** (object, nullable): The complete question information, including:\r\n      - **questionId** (int): The unique identifier of the question.\r\n      - **questionType** (string): The type of question (e.g., \"multiple_choice\").\r\n      - **difficulty** (int): The difficulty level of the question.\r\n      - **lessonId** (int): The ID of the associated lesson.\r\n      - **imgUrl** (string): The URL of an image related to the question.\r\n      - **questionContent** (string): The text content of the question.\r\n      - **pdfSolution** (string, nullable): A PDF solution reference, if available.\r\n      - **choiceAnswers** (array): List of multiple-choice answers.\r\n      - **fillAnswers** (array): List of fill-in-the-blank answers (if applicable).\r\n      - **matchingAnswers** (array): List of matching question pairs (if applicable).\r\n\r\n**Example Request:**\r\n```http\r\nGET /api/exerciseresult/enrollment/id/11/exercise/id/25\r\n```",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exerciseid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/exerciseresults/enrollment/id/{id}": {
      "get": {
        "tags": [
          "ExerciseResult"
        ],
        "summary": "Retrieves all exercise results associated with a specific enrollment ID.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API returns a list of exercise results for a given enrollment ID, including details about each exercise result.\r\n            \r\n**Request Parameters:**\r\n- **id** (int): The enrollment ID of the user.\r\n            \r\n**Response Format:**\r\nThe response will return a list of exercise results, where each result includes:\r\n- **exerciseId** (int): The unique identifier of the exercise.\r\n- **enrollmentId** (int): The ID of the enrollment.\r\n- **score** (decimal, nullable): The score achieved for this exercise.\r\n- **doneAt** (datetime, nullable): The timestamp when the exercise was completed.\r\n- **exerciseDetailResults** (array): List of exercise detail results, each containing:\r\n  - **isCorrect** (bool, nullable): Whether the answer is correct or not.\r\n  - **questionType** (string): The type of question (\"multiple_choice\", \"fill_in_blank\", \"matching\").\r\n  - **userChoiceAnswers** (array, nullable): For multiple_choices questions, the user's wrong answers:\r\n    - **answerId** (string): The incorrect answer id provided by the user.\r\n    - **isCorrect** (int): whether the answer is correct or not.\r\n  - **userFillAnswers** (array, nullable): For fill_in_blank questions, the user's wrong answers:\r\n    - **wrongAnswer** (string): The incorrect answer provided by the user.\r\n    - **position** (int): The position of the blank in the question.\r\n  - **exerciseDetail** (object, nullable): Details about the exercise, including:\r\n    - **question** (object, nullable): The complete question information.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /api/exerciseresults/enrollment/id/11 \r\n```",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The enrollment ID of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/lesson/grade/{grade}/lessonorder/{lessonorder}": {
      "get": {
        "tags": [
          "Lesson"
        ],
        "summary": "Retrieves the details of a lesson associated with a specific grade, chapter, and lesson order.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API returns the details of a lesson, filtered by grade level, chapter order, and lesson order.\r\n\r\n**Request Parameters:**\r\n- **grade** (int): The grade level of the study program.\r\n- **chapterorder** (int): The sequential order of the chapter.\r\n- **lessonorder** (int): The sequential order of the lesson within the chapter.\r\n\r\n**Response Format:**\r\nThe response will return the details of the lesson, including:\r\n- **lessonOrder** (short?): The order of the lesson within the chapter. Nullable to allow for optional lesson orders.\r\n- **lessonName** (string): The name of the lesson.\r\n- **lessonContent** (string, nullable): The content of the lesson, if available. This can be null if no content is provided.\r\n\r\n**Example Request:**\r\n```http\r\nGET /api/lesson/grade/1/chapterorder/1/lessonorder/1\r\n```",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lessonorder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/lesson/grade/{grade}/chapter/{chapterorder}": {
      "post": {
        "tags": [
          "Lesson"
        ],
        "summary": "Creates a new lesson associated with a specific grade and chapter order.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API creates a new lesson and saves it in the system. The lesson is created with the provided grade level, chapter order, and lesson data.\r\n\r\n**Request Parameters:**\r\n- **grade** (int): The grade level of the study program.\r\n- **chapterorder** (int): The sequential order of the chapter in the study program.\r\n- **lessonDto** (LessonDto): The details of the lesson to be created. This should include:\r\n  - **lessonOrder** (short?): The order of the lesson within the chapter.\r\n  - **lessonName** (string): The name of the lesson.\r\n  - **lessonContent** (string, nullable): The content of the lesson (optional).\r\n\r\n**Response Format:**\r\n- **201 Created**: If the lesson is successfully created, the response will include the created `LessonDto` and the URL of the new lesson.\r\n- **400 Bad Request**: If the lesson could not be created, the response will contain an error message with details on the failure.\r\n\r\n**Example Request:**\r\n```http\r\nPOST /api/lesson/grade/1/chapter/1\r\nContent-Type: application/json\r\n{\r\n  \"lessonOrder\": 2,\r\n  \"lessonName\": \"Vị trí tiết 2\",\r\n  \"lessonContent\": \"linkyoutube\"\r\n}\r\n**Example Response (Success):**\r\n```json\r\nHTTP/1.1 201 Created\r\nLocation: /api/lesson/grade/1/chapter/1/lessonorder/2\r\n{\r\n  \"lessonOrder\": 2,\r\n  \"lessonName\": \"Vị trí tiết 2\",\r\n  \"lessonContent\": \"linkyoutube\"\r\n}",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chapterorder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/lesson/grade/{grade}/lessonname/{lessonname}": {
      "get": {
        "tags": [
          "Lesson"
        ],
        "summary": "Retrieves the list of lessons for a specific grade and lesson name.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API retrieves all lessons that match a specific grade level and lesson name.\r\nThe search is case-insensitive and ignores accents in the lesson name.\r\n\r\n**Request Parameters:**\r\n- **grade** (int): The grade level of the study program.\r\n- **lessonname** (string): The name of the lesson to search for. The search will return lessons whose name contains the provided `lessonname`, regardless of case and accents.\r\n\r\n**Response Format:**\r\nThe response will return a list of lessons that match the specified criteria, including:\r\n- **lessonOrder** (short?): The order of the lesson within the chapter.\r\n- **lessonName** (string): The name of the lesson.\r\n- **lessonContent** (string, nullable): The content of the lesson, if available. This can be null if no content is provided.\r\n\r\n**Example Request:**\r\n```http\r\nGET /api/lesson/grade/1/lessonname/vi tri\r\n```",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lessonname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/lessons/grade/{grade}/exercises": {
      "get": {
        "tags": [
          "Lesson"
        ],
        "summary": "Retrieves all lessons with their chapters and exercises for a specific grade.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API returns lessons that have exercises associated with them, filtered by grade level.\r\nEach lesson includes its chapter information and a list of exercises.\r\n\r\n**Request Parameters:**\r\n- **grade** (int): The grade level of the study program.\r\n\r\n**Response Format:**\r\nThe response will return a list of lessons with their associated chapters and exercises:\r\n- **lessonOrder** (short?): The order of the lesson within the chapter.\r\n- **lessonName** (string): The name of the lesson.\r\n- **lessonVideoUrl** (string, nullable): The URL to the lesson video, if available.\r\n- **lessonPdfUrl** (string, nullable): The URL to the lesson PDF, if available.\r\n- **chapter**: The chapter that contains this lesson.\r\n- **exercises**: The list of exercises associated with this lesson.\r\n\r\n**Example Request:**\r\n```http\r\nGET /api/lessons/grade/1/exercises\r\n```",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonWithChapterAndExerciseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/LessonProgress/id/{id}": {
      "get": {
        "tags": [
          "LessonProgress"
        ],
        "summary": "Returns all information of the study program the user has registered for.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API retrieves the user's study program information, including lesson details and learning progress.\r\n\r\n**Request:**\r\nThe request should include userID.\r\n\r\n**Response:**\r\nThe response will return a list of lessons, each containing:\r\n- **lessonId**: The unique identifier of the lesson.\r\n- **learningProgress**: The progress of the user in the lesson (e.g., percentage completed).\r\n- **isCompleted**: A boolean indicating whether the lesson is completed.\r\n- **lesson**: An object containing lesson details:\r\n  - **lessonOrder**: The order of the lesson in the study plan.\r\n  - **lessonName**: The name of the lesson.\r\n  - **lessonContent**: The content of the lesson.\r\n  \r\n **Example Request:**\r\n```http\r\nGET /api/lessonprogress/id/14",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonProgressDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/LessonProgress/id/{id}/grade/{grade}/semester/{semester}": {
      "get": {
        "tags": [
          "LessonProgress"
        ],
        "summary": "Returns lesson progress information filtered by chapter's grade and semester.",
        "description": "*Only logged in users can use this API (including user and admin)*\r\nThis API retrieves lesson progress information for a specific enrollment, filtered by the chapter's grade and semester.\r\n\r\n**Request:**\r\nThe request should include the **enrollment ID**, **grade**, and **semester**.\r\n\r\n**Response:**\r\nThe response will return a list of lesson progress records matching the specified grade and semester, each containing:\r\n- **learningProgressId**: The unique identifier of the progress record.\r\n- **lessonId**: The unique identifier of the lesson.\r\n- **status**: The current status of the lesson (not_started, in_progress, completed).\r\n- **process** (int): The updated progress of the user in the lesson (e.g., 20,30,70).\r\n- **lesson**: An object containing lesson details:\r\n  - **lessonOrder**: The order of the lesson in the study plan.\r\n  - **lessonName**: The name of the lesson.\r\n  - **lessonVideoUrl**: URL to the lesson's video content.\r\n  - **lessonPdfUrl**: URL to the lesson's PDF content.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /api/lessonprogress/id/14/grade/3/semester/1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "semester",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonProgressDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/LessonProgress/update/lesson/{lessonId}/enrollment/{enrollmentId}/status/{status}/process/{process}": {
      "patch": {
        "tags": [
          "LessonProgress"
        ],
        "summary": "Updates the learning progress of a specific lesson progress record.",
        "description": "*User and admin can use this api*\r\nThis API updates the user's learning progress for a specific lesson.\r\n\r\n**Request:**\r\nThe request should include:\r\n- **lessonID** (int): The unique identifier of the lesson .\r\n- **enrollmentID** (int): The unique identifier of the enrollment.\r\n- **status** (int): The status to be updated (0 is not_started, 1 is completed, 2 is in_progress).\r\n- **process** (int): The updated progress of the user in the lesson (e.g., 20,30,70).\r\n            \r\n**Response:**\r\nIf successful, the response will return the updated lesson progress information:\r\n- **learningProgressId**: The unique identifier of the lesson progress.\r\n- **lessonId**: The unique identifier of the lesson.\r\n- **status**: The updated progress of the user in the lesson (e.g., completed).\r\n- **process**: The updated progress of the user in the lesson (e.g., 20,30,70).\r\n- **lesson**: An object containing lesson details:\r\n  - **lessonOrder**: The order of the lesson in the study plan.\r\n  - **lessonName**: The name of the lesson.\r\n  - **lessonContent**: A link to the lesson content.\r\n            \r\n**Example Request:**\r\n```http\r\nPATCH /update/lesson/25/enrollment/2/status/2/process/20",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enrollmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "process",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/login/google": {
      "get": {
        "tags": [
          "LoginWithGoogle"
        ],
        "summary": "Initiates the login process via Google.",
        "description": "This endpoint starts the Google authentication process. It redirects to the Google login page.\r\nThe request should include the `returnUrl` query parameter that will be used after successful authentication.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /account/login/google?returnUrl=https://example.com/dashboard\r\n```",
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "description": "The URL to redirect to after successful login.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/login/google/callback": {
      "get": {
        "tags": [
          "LoginWithGoogle"
        ],
        "summary": "Handles the callback from Google after authentication, do not used by front-end",
        "description": "This endpoint is triggered after the user has authenticated with Google.\r\nIf authentication is successful, the user's principal is passed to a command for login processing.\r\nIf authentication fails, the request is rejected.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /account/login/google/callback?returnUrl=https://example.com/dashboard\r\n```",
        "operationId": "GoogleLoginCallback",
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "description": "The URL to redirect to after successful login.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/register/user": {
      "post": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Registers a new user account.",
        "description": "This API allows the creation of a new user account with the provided registration details.\r\n            \r\n**Request:**\r\nThe request body must contain the user information:\r\n- **UserName**: The username for the account.\r\n- **Email**: The email address associated with the account.\r\n- **Dob**: The date of birth of the user.\r\n- **PhoneNumber**: The phone number of the user.\r\n- **Password**: The password for the account(Consists of at least 8 characters, with uppercase and lowercase letters).\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /account/register/user\r\nContent-Type: application/json\r\n{\r\n    \"UserName\": \"john_doe\",\r\n    \"Email\": \"john.doe@example.com\",\r\n    \"Dob\": \"1990-01-01T00:00:00\",\r\n    \"PhoneNumber\": \"0909909090\",\r\n    \"Password\": \"securepasswordAa\"\r\n}\r\n```",
        "requestBody": {
          "description": "The registration details for the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/register/admin": {
      "post": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Registers a new admin account.",
        "description": "This API allows the creation of a new admin account with the provided registration details.\r\n            \r\n**Request:**\r\nThe request body must contain the admin information:\r\n- **UserName**: The username for the account.\r\n- **Email**: The email address associated with the account.\r\n- **Gender**: The gender of the admin.\r\n- **Dob**: The date of birth of the admin.\r\n- **Avatar**: The avatar image URL for the admin.\r\n- **Password**: The password for the account(Consists of at least 8 characters, with uppercase and lowercase letters).\r\n- **Status**: The status of the account (active/inactive).\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /account/register/admin\r\nContent-Type: application/json\r\n{\r\n    \"UserName\": \"admin_john\",\r\n    \"Email\": \"admin.john@example.com\",\r\n    \"Dob\": \"1985-01-01T00:00:00\",\r\n    \"PhoneNumber\": \"0909909090\",\r\n    \"Password\": \"adminpassword\"\r\n}\r\n```",
        "requestBody": {
          "description": "The registration details for the admin.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/login": {
      "post": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Logs in a user and returns JWT and refresh tokens.",
        "description": "This API handles user login by verifying credentials and issuing tokens.\r\n            \r\n**Request:**\r\nThe request body must contain the login information:\r\n- **Email**: The user's email address.\r\n- **Password**: The user's password.\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /account/login\r\nContent-Type: application/json\r\n{\r\n    \"Email\": \"michael.brown@example.com\",\r\n    \"Password\": \"Michael@101\"\r\n}\r\n```",
        "requestBody": {
          "description": "The login details for the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/refresh-token": {
      "post": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Refreshes a JWT token using a refresh token and returns a new JWT token and refresh token.",
        "description": "This API allows a client to refresh an expired JWT token by providing a valid refresh token.\r\nA new JWT token and a new refresh token will be issued if the provided refresh token is valid.\r\n            \r\n**Request:**\r\nThe request body must contain the refresh token:\r\n- **refreshTokenRequest**: The refresh token previously issued to the client.\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /api/account/refresh-token\r\nContent-Type: application/json\r\n{\r\n    \"refreshTokenRequest\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\r\n}",
        "requestBody": {
          "description": "The refresh token provided by the client to obtain a new JWT token.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/forgot-password": {
      "get": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Initiates the forgot password process by sending a reset password link to the user's email.",
        "description": "- This endpoint does not require authentication.\r\n- The host parameter should be the base URL of the frontend application\r\n  where the user will be redirected to reset their password.\r\n- If the email is not found or an error occurs, a bad request response is returned with an error message.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address of the user requesting a password reset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "The host URL used to construct the password reset link (e.g., \"http://localhost:5173/forgot-password\").",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/account/reset-password": {
      "post": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Initiates the forgot password process by sending a reset password link to the user's email.",
        "description": "- This endpoint does not require authentication.\r\n- The host parameter should be the base URL of the frontend application\r\n  where the user will be redirected to reset their password.\r\n- If the email is not found or an error occurs, a bad request response is returned with an error message.\r\n- Frontend code reference: https://drive.google.com/drive/folders/18M__nFfmDoVOyqHElTmNdyTL7PiEfbXX?usp=sharing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/confirm-email": {
      "get": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "This API uses a callback when the user clicks on the email confirmation link. This API is not used by the front-end.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/test-authentication": {
      "get": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "Api test if user logged(Both admin and user)",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/test-authentication-admin": {
      "get": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "This API is used to test users who have logged in and have the Role of Admin.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/test-authentication-user": {
      "get": {
        "tags": [
          "LoginWithUSPW"
        ],
        "summary": "This API is used to test users who have logged in and have the Role of user.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/logout": {
      "post": {
        "tags": [
          "Logout"
        ],
        "summary": "Logs out the current user by invalidating tokens and ending the session.",
        "description": "This API handles user logout by:\r\n- Invalidating refresh tokens\r\n- Clearing authentication cookies\r\n- Recording session end time for analytics\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /account/logout\r\nAuthorization: Bearer {your-jwt-token}\r\n```",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/all": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Retrieves all notifications for admin users.",
        "description": "*Only admin users can use this API.*\r\nThis API returns a list of all notifications available in the system for administrative purposes.\r\n**Response Format:**\r\nThe response will return a collection of notifications",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/user/all": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Retrieves all notifications for the authenticated user.",
        "description": "*Only authenticated users can use this API.*\r\nThis API returns a list of notifications specific to the currently logged-in user.\r\n            \r\n**Request Parameters:**\r\nNone\r\n            \r\n**Response Format:**\r\nThe response will return a collection of notifications",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/user/newest": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Retrieves the most recent notification for the authenticated user.",
        "description": "*Only authenticated users can use this API.*\r\nThis API returns the newest notification specific to the currently logged-in user.\r\n            \r\n**Response Format:**\r\nThe response will return a single the newest notification.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/push/all": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Sends a notification to all users.",
        "description": "*Only admin users can use this API.*\r\nThis API sends a notification to all users in the system based on the provided notification details.\r\n            \r\n**Request Parameters:**\r\n- **requestDto** (NotificationRequestDto): The notification details, including:\r\n  - **notificationType** (string): The type of notification. Must be one of: \"info\", \"warning\", \"success\", or \"error\" or something else.\r\n  - **notificationTitle** (string): The title of the notification.\r\n  - **notificationMessage** (string): The content or message of the notification.\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /api/notification/push/all\r\nContent-Type: application/json\r\n{\r\n  \"notificationType\": \"info\",\r\n  \"notificationTitle\": \"System Update\",\r\n  \"notificationMessage\": \"The system will undergo maintenance this weekend.\"\r\n}\r\n```",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/push/user/{userId}": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Sends a notification to a specific user by their ID.",
        "description": "*Only admin users can use this API.*\r\nThis API sends a notification to a specific user identified by their user ID, using the provided notification details.\r\n            \r\n**Request Parameters:**\r\n- **userId** (int): The unique identifier of the target user.\r\n- **requestDto** (NotificationRequestDto): The notification details, including:\r\n  - **notificationType** (string): The type of notification. Must be one of: \"info\", \"warning\", \"success\", or \"error\" or something else\r\n  - **notificationTitle** (string): The title of the notification.\r\n  - **notificationMessage** (string): The content or message of the notification.\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /api/notification/push/user/1\r\nContent-Type: application/json\r\n{\r\n  \"notificationType\": \"success\",\r\n  \"notificationTitle\": \"Task Completed\",\r\n  \"notificationMessage\": \"Your task has been successfully completed.\"\r\n}\r\n```",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/notification/update/{notificationId}": {
      "patch": {
        "tags": [
          "Notification"
        ],
        "summary": "Updates the status of a specific notification from Unread to Read for the authenticated user.",
        "description": "*Only authenticated users can use this API.*\r\nThis API updates the status of a notification identified by its ID, marking it as Read for the currently logged-in user.\r\n            \r\n**Request Parameters:**\r\n- **notificationId** (int): The unique identifier of the notification to be updated.",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/payment/plan/{idPlan}/user/{idUser}": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Generates a VnPay payment URL for purchasing a study plan.",
        "description": "*Only logged in users can use this api*\r\nThis API creates a VnPay payment URL for a specific study plan purchase by a user.\r\n            \r\n**Request:**\r\nSend a request with the following route parameters:\r\n- **idPlan**: The ID of the study plan to be purchased.\r\n- **idUser**: The ID of the user making the payment.\r\n            \r\n**Example Request:**\r\n```http\r\nPOST /payment/plan/2/user/1\r\n```\r\n            \r\n**Response:**\r\n```json\r\n{\r\n    \"paymentUrl\": \"https://sandbox.vnpayment.vn/payment/link-to-pay\"\r\n}\r\n```",
        "parameters": [
          {
            "name": "idPlan",
            "in": "path",
            "description": "The ID of the study plan.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "idUser",
            "in": "path",
            "description": "The ID of the user making the payment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/payment/vnpay/callback": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Handles the VnPay payment callback and displays the payment result.\r\nUsed only by back-end, front-end doesn't care",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/payment/token/{tokenPackageId}/user/{userId}": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Creates a payment for a token package purchase.",
        "description": "*Only logged in users can use this API*\r\nThis API initiates a payment process for a specific token package purchase by a user.\r\n            \r\n**Request:**\r\nSend a request with the following route parameters:\r\n- **tokenPackageId**: The ID of the token package to be purchased.\r\n- **userId**: The ID of the user making the payment.\r\n\r\n/// **Example Request:**\r\n```http\r\nPOST /payment/token/1/user/1\r\n```",
        "parameters": [
          {
            "name": "tokenPackageId",
            "in": "path",
            "description": "The ID of the token package.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user making the payment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/payment/user/{userId}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieve the latest payment information for a specific user.",
        "description": "*Only logged in users can use this api*  \r\nThis API fetches the latest payment details associated with a given user ID, including payment method, plan, and token package information (if available).  \r\nThe response includes data such as payment ID, method ID, user ID, plan details, and transaction information.  \r\n            \r\n**Request:**  \r\nSend a request with the following route parameter:  \r\n- **userId**: The ID of the user whose payment information is to be retrieved.  \r\n            \r\n**Example Request:**  \r\n```http\r\nGET /api/payment/user/1\r\n```",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user whose payment information is to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payment information successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              }
            }
          },
          "404": {
            "description": "Indicates that no payment information was found for the given user ID."
          }
        }
      }
    },
    "/api/payment/user/{userId}/all": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves all payment information for a specific user.",
        "description": "*Only logged in users can use this api*  \r\nThis API fetches the latest payment details associated with a given user ID, including payment method, plan, and token package information (if available).  \r\nThe response includes data such as payment ID, method ID, user ID, plan details, and transaction information.  \r\n            \r\n**Request:**  \r\nSend a request with the following route parameter:  \r\n- **userId**: The ID of the user whose payment information is to be retrieved.  \r\n            \r\n**Example Request:**  \r\n```http\r\nGET /api/payment/user/1/all\r\n```",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user whose payment information is to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payment information successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDto"
                }
              }
            }
          },
          "404": {
            "description": "Indicates that no payment information was found for the given user ID."
          }
        }
      }
    },
    "/api/payments/pageindex/{pageIndex}/pagesize/{pageSize}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get all system payments with pagination",
        "description": "*Only admin users can access this API*\r\n\r\nThis API retrieves all payment records in the system with pagination support.\r\nResults are ordered by date in descending order (most recent first).\r\n\r\n**Path Parameters:**\r\n- **pageIndex**: Zero-based page index (0 for first page)\r\n- **pageSize**: Number of items per page (recommended: 10-50)\r\n\r\n**Example Requests:**\r\n- First page with 10 items: `/api/payments/pageindex/0/pagesize/10`\r\n- Second page with 20 items: `/api/payments/pageindex/1/pagesize/20`",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "description": "Zero-based page index (0 for first page)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "Number of items per page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDtoPagination"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDtoPagination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDtoPagination"
                }
              }
            }
          }
        }
      }
    },
    "/api/paymentmethod": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Only logged user can use this api (include admin and user).\r\nThis API return all Payment method.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/plan": {
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "Only logged user can use this api (include user or admin).\r\nThis api return all plan to user buy it.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/question/grade/{grade}/lessonorder/{lessonorder}": {
      "get": {
        "tags": [
          "Question"
        ],
        "summary": "Retrieves all questions associated with a specific grade and lesson order.",
        "description": "*Only logged in users can use this api (including user and admin)*\r\nThis API returns a list of questions for a given study program, filtered by grade level and lesson order.\r\n            \r\n**Request Parameters:**\r\n- **grade** (int): The grade level of the study program.\r\n- **lessonOrder** (int): The sequential order of the lesson.\r\n            \r\n**Response Format:**\r\nThe response will return a list of questions, each containing:\r\n- **questionId** (int): The unique identifier of the question.\r\n- **questionType** (string): The type of question (e.g., \"multiple_choice\", \"fill_in_blank\", \"matching\").\r\n- **difficulty** (int): The difficulty level of the question.\r\n- **lessonId** (int): The identifier of the associated lesson.\r\n- **imgUrl** (string, nullable): The URL of an image related to the question.\r\n- **questionContent** (string): The text content of the question.\r\n- **pdfSolution** (string, nullable): A PDF solution reference, if available.\r\n- **choiceAnswers** (array): List of multiple-choice answers (if applicable):\r\n  - **answerId** (int): The unique identifier of the answer choice.\r\n  - **content** (string, nullable): The text of the answer choice (if applicable).\r\n  - **isCorrect** (bool): Whether this choice is the correct answer.\r\n  - **imgUrl** (string, nullable): An optional image URL for the answer choice.\r\n- **fillAnswers** (array): List of correct answers for fill-in-the-blank questions (if applicable):\r\n  - **answerId** (int): The unique identifier of the correct answer.\r\n  - **correctAnswer** (string): The correct text answer that should be filled in.\r\n  - **position** (short): The position of the blank in the question (for multi-blank questions).\r\n- **matchingAnswers** (array): List of matching question pairs (if applicable):\r\n  - **answerId** (int): The unique identifier of the matching answer.\r\n  - **correctAnswer** (string): The correct match for the question.\r\n  - **imgUrl** (string, nullable): An image URL representing the matching item.\r\n            \r\n**Example Request:**\r\n```http\r\nGET /api/question/grade/1/lessonorder/1\r\n```",
        "parameters": [
          {
            "name": "grade",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lessonorder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/statistics/{periodType}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get user statistics for a specific time period",
        "description": "This API retrieves comprehensive user statistics based on the specified time period.\r\n\r\n**Period Types:**\r\n- **day**: Statistics for the current day compared to the previous day\r\n- **week**: Statistics for the current week compared to the previous week\r\n- **month**: Statistics for the current month compared to the previous month\r\n- **year**: Statistics for the current year compared to the previous year\r\n\r\n**Response includes:**\r\n- User count statistics (current period, previous period, growth rate)\r\n- User engagement metrics (average usage time in minutes, change rate)\r\n- Revenue statistics (current and previous periods, growth rate)\r\n- Daily breakdown of user activity\r\n\r\n**Example Request:**\r\n```http\r\nGET /api/users/statistics/week\r\n```",
        "parameters": [
          {
            "name": "periodType",
            "in": "path",
            "description": "The time period type ('day', 'week', 'month', or 'year')",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsSummaryDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/revenue/daily/startdate/{startDateTime}/enddate/{endDateTime}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get daily revenue by date range with specific time",
        "parameters": [
          {
            "name": "startDateTime",
            "in": "path",
            "description": "Start date and time (format: yyyy-MM-ddTHH:mm:ss)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateTime",
            "in": "path",
            "description": "End date and time (format: yyyy-MM-ddTHH:mm:ss)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyRevenueDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tokenpackage": {
      "get": {
        "tags": [
          "TokenPackage"
        ],
        "summary": "Only logged user can use this api.\r\nThis API return all token package.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/pageindex/{pageindex}/pagesize/{pagesize}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a paginated list of user information, accessible only to users with Admin privileges.",
        "description": "- This endpoint requires the caller to be authenticated and have the \"Admin\" role.",
        "parameters": [
          {
            "name": "pageindex",
            "in": "path",
            "description": "The index of the page to retrieve (starting from 0).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagesize",
            "in": "path",
            "description": "The number of users to include per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user/info": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "This api used to get information of currently logged in user",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/filter": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets users with advanced filtering and searching capabilities",
        "description": "*Only administrators can use this API*\r\n\r\n**Functionality:**\r\n- Search users by email or username (case-insensitive matching)\r\n- Filter users by role (1 for User, 2 for Admin)\r\n- Filter users by status (true for active, false for inactive)\r\n- All filters are optional - leave empty to skip filtering\r\n- Results are paginated and ordered alphabetically by username\r\n            \r\n**Request:**\r\nThe request can include the following query parameters:\r\n- **searchTerm** (optional): Text to search in email and username fields\r\n- **role** (optional): Filter by user role (1 for User, 2 for Admin)\r\n- **status** (optional): Filter by account status (true for active, false for inactive)\r\n- **pageindex**: The page index (starts from 0)\r\n- **pagesize**: Number of records per page\r\n            \r\n**Response:**\r\nThe response will return a paginated list of users:\r\n- **pageIndex**: Current page index\r\n- **pageSize**: Number of items per page\r\n- **totalCount**: Total number of matching users\r\n- **items**: Array of user objects containing id, userName, email, phoneNumber, gender, dob, avatar, and status\r\n            \r\n**Example Requests:**\r\n```\r\nGET /api/user/filter?pageindex=0&pagesize=10\r\nGET /api/user/filter?searchTerm=john&role=1&status=true&pageindex=0&pagesize=10\r\n```",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Text to search in email and username fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role (1 for User, 2 for Admin)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by account status (true for active, false for inactive)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageindex",
            "in": "query",
            "description": "The page index (starts from 0)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Number of records per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user/delete/{email}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user by their email, accessible only to users with Admin privileges.",
        "description": "- This endpoint requires the caller to be authenticated and have the \"Admin\" role.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "The email of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/account/update": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates a user by their ID, accessible only to users with Admin privileges.",
        "description": "- This endpoint requires the caller to be authenticated and have the  role.",
        "requestBody": {
          "description": "The update request containing the fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/wallet/user/{UserId}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get a wallet by user ID.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/wallet/token": {
      "patch": {
        "tags": [
          "Wallet"
        ],
        "summary": "Update the amount of tokens used in a wallet.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/coin": {
      "patch": {
        "tags": [
          "Wallet"
        ],
        "summary": "Update the amount of coins used in a wallet.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChapterDto": {
        "type": "object",
        "properties": {
          "grade": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "chapterOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "chapterName": {
            "type": "string",
            "nullable": true
          },
          "semester": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lessons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChapterSummaryDto": {
        "type": "object",
        "properties": {
          "chapterId": {
            "type": "integer",
            "format": "int32"
          },
          "grade": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "chapterOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "chapterName": {
            "type": "string",
            "nullable": true
          },
          "semester": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChoiceAnswerDto": {
        "type": "object",
        "properties": {
          "answerId": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "isCorrect": {
            "type": "boolean",
            "nullable": true
          },
          "imgUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CoinTransactionDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "integer",
            "format": "int32"
          },
          "coinTransactionId": {
            "type": "integer",
            "format": "int32"
          },
          "tokenPackageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isTokenPackage": {
            "type": "boolean",
            "nullable": true
          },
          "coinRemains": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tokenPackage": {
            "$ref": "#/components/schemas/TokenPackageDto"
          }
        },
        "additionalProperties": false
      },
      "DailyRevenueDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "revenue": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EnrollmentDto": {
        "type": "object",
        "properties": {
          "enrollmentId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "grade": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enrollmentDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "avgScore": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "semester": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startYear": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "endYear": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExerciseDetailDto": {
        "type": "object",
        "properties": {
          "question": {
            "$ref": "#/components/schemas/QuestionDto"
          }
        },
        "additionalProperties": false
      },
      "ExerciseDetailResultDto": {
        "type": "object",
        "properties": {
          "questionType": {
            "type": "string",
            "nullable": true
          },
          "questionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isCorrect": {
            "type": "boolean",
            "nullable": true
          },
          "exerciseDetailId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "exerciseResultId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "exerciseDetail": {
            "$ref": "#/components/schemas/ExerciseDetailDto"
          },
          "userChoiceAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChoiceAnswerDto"
            },
            "nullable": true
          },
          "userFillAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFillAnswerDto"
            },
            "nullable": true
          },
          "userMatchingAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMatchingAnswerDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExerciseDetailResultForGetDto": {
        "type": "object",
        "properties": {
          "isCorrect": {
            "type": "boolean",
            "nullable": true
          },
          "questionType": {
            "type": "string",
            "nullable": true
          },
          "userChoiceAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChoiceAnswerDto"
            },
            "nullable": true
          },
          "userFillAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFillAnswerDto"
            },
            "nullable": true
          },
          "userMatchingAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMatchingAnswerDto"
            },
            "nullable": true
          },
          "exerciseDetail": {
            "$ref": "#/components/schemas/ExerciseDetailDto"
          }
        },
        "additionalProperties": false
      },
      "ExerciseDto": {
        "type": "object",
        "properties": {
          "exerciseName": {
            "type": "string",
            "nullable": true
          },
          "exerciseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "lessonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "exerciseResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExerciseResultDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExerciseExtraForLessonDto": {
        "type": "object",
        "properties": {
          "exerciseName": {
            "type": "string",
            "nullable": true
          },
          "exerciseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "exerciseDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExerciseDetailDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExerciseResultDto": {
        "type": "object",
        "properties": {
          "exerciseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enrollmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "doneAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exerciseDetailResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExerciseDetailResultForGetDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FillAnswerDto": {
        "type": "object",
        "properties": {
          "answerId": {
            "type": "integer",
            "format": "int32"
          },
          "correctAnswer": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LessonDto": {
        "type": "object",
        "properties": {
          "lessonOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lessonName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lessonVideoUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lessonPdfUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "mainExercise": {
            "$ref": "#/components/schemas/ExerciseExtraForLessonDto"
          },
          "chapterOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "extraExercise": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExerciseExtraForLessonDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LessonProgressDto": {
        "type": "object",
        "properties": {
          "learningProgressId": {
            "type": "integer",
            "format": "int32"
          },
          "lessonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "process": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "lesson": {
            "$ref": "#/components/schemas/LessonDto"
          }
        },
        "additionalProperties": false
      },
      "LessonWithChapterAndExerciseDto": {
        "type": "object",
        "properties": {
          "lessonOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lessonName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lessonVideoUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lessonPdfUrl": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "chapter": {
            "$ref": "#/components/schemas/ChapterSummaryDto"
          },
          "exercises": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExerciseDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchingAnswerDto": {
        "type": "object",
        "properties": {
          "answerId": {
            "type": "integer",
            "format": "int32"
          },
          "answerContent1": {
            "type": "string",
            "nullable": true
          },
          "answerContent2": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MethodDto": {
        "type": "object",
        "properties": {
          "methodId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "methodName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationRequestDto": {
        "type": "object",
        "properties": {
          "notificationType": {
            "type": "string",
            "nullable": true
          },
          "notificationTitle": {
            "type": "string",
            "nullable": true
          },
          "notificationMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentDto": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "methodId": {
            "type": "integer",
            "format": "int32"
          },
          "walletId": {
            "type": "integer",
            "format": "int32"
          },
          "orderID": {
            "type": "string",
            "nullable": true
          },
          "transactionID": {
            "type": "string",
            "nullable": true
          },
          "planId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "method": {
            "$ref": "#/components/schemas/MethodDto"
          },
          "plan": {
            "$ref": "#/components/schemas/PlansDto"
          }
        },
        "additionalProperties": false
      },
      "PaymentDtoPagination": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PeriodStatisticsDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "periodType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlansDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "integer",
            "format": "int32"
          },
          "planName": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "coins": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "QuestionDto": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "questionType": {
            "type": "string",
            "nullable": true
          },
          "difficulty": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lessonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "imgUrl": {
            "type": "string",
            "nullable": true
          },
          "questionContent": {
            "type": "string",
            "nullable": true
          },
          "pdfSolution": {
            "type": "string",
            "nullable": true
          },
          "choiceAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChoiceAnswerDto"
            },
            "nullable": true
          },
          "fillAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FillAnswerDto"
            },
            "nullable": true
          },
          "matchingAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingAnswerDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "required": [
          "dob",
          "email",
          "password",
          "phoneNumber",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "boolean",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RevenueStatisticsDto": {
        "type": "object",
        "properties": {
          "currentRevenue": {
            "type": "number",
            "format": "double"
          },
          "previousRevenue": {
            "type": "number",
            "format": "double"
          },
          "growthRate": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "$ref": "#/components/schemas/PeriodStatisticsDto"
          }
        },
        "additionalProperties": false
      },
      "StatisticsSummaryDto": {
        "type": "object",
        "properties": {
          "userCounts": {
            "$ref": "#/components/schemas/UserCountStatisticsDto"
          },
          "userEngagement": {
            "$ref": "#/components/schemas/UserEngagementStatisticsDto"
          },
          "dailyStatistics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDailyStatisticsDto"
            },
            "nullable": true
          },
          "revenueStatistics": {
            "$ref": "#/components/schemas/RevenueStatisticsDto"
          }
        },
        "additionalProperties": false
      },
      "TokenPackageDto": {
        "type": "object",
        "properties": {
          "tokenPackageId": {
            "type": "integer",
            "format": "int32"
          },
          "packageName": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TokenTransactionDto": {
        "type": "object",
        "properties": {
          "tokenTransactionId": {
            "type": "integer",
            "format": "int32"
          },
          "walletId": {
            "type": "integer",
            "format": "int32"
          },
          "tokenRemains": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tokenAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "boolean",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateWalletRequest": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserChoiceAnswerDto": {
        "type": "object",
        "properties": {
          "answerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isCorrect": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCountStatisticsDto": {
        "type": "object",
        "properties": {
          "currentCount": {
            "type": "integer",
            "format": "int32"
          },
          "previousCount": {
            "type": "integer",
            "format": "int32"
          },
          "growthRate": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "$ref": "#/components/schemas/PeriodStatisticsDto"
          }
        },
        "additionalProperties": false
      },
      "UserDailyStatisticsDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userCount": {
            "type": "integer",
            "format": "int32"
          },
          "averageUsageMinutes": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UserEngagementStatisticsDto": {
        "type": "object",
        "properties": {
          "currentAverageMinutes": {
            "type": "number",
            "format": "double"
          },
          "previousAverageMinutes": {
            "type": "number",
            "format": "double"
          },
          "changeRate": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "$ref": "#/components/schemas/PeriodStatisticsDto"
          }
        },
        "additionalProperties": false
      },
      "UserFillAnswerDto": {
        "type": "object",
        "properties": {
          "wrongAnswer": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserMatchingAnswerDto": {
        "type": "object",
        "properties": {
          "answerContent1": {
            "type": "string",
            "nullable": true
          },
          "answerContent2": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WalletDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "coinRemains": {
            "type": "integer",
            "format": "int32"
          },
          "tokenRemains": {
            "type": "integer",
            "format": "int32"
          },
          "coinTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoinTransactionDto"
            },
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDto"
            },
            "nullable": true
          },
          "tokenTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenTransactionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}