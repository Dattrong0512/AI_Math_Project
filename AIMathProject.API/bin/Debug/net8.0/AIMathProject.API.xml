<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIMathProject.API</name>
    </assembly>
    <members>
        <member name="M:AIMathProject.API.Controllers.ChapterController.GetAllChapter">
            <summary>
             Return all chapters of all class
            </summary>
            /// <remarks>
            *Only logged in users can use this api (including user and admin)*
            - **grade**: The grade level
            - **chapterOrder**: The order of the chapter in the curriculum.
            - **chapterName**: The name of the chapter.
            - **lessons**: Null, because this api just return information about grade and chapters, not include lessions in chapter
            </remarks>
            <returns>return list of chapters of classes </returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ChapterController.GetDetailChapters">
            <summary>
             Returns detailed information of each lesson in the chapters
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            - **grade**: The grade level
            - **chapterOrder**: The order of the chapter in the curriculum.
            - **semester**: semester
            - **chapterName**: The name of the chapter.
            - **lessons**: A list of lessons within the chapter. Each lesson includes:
              - **lessonOrder**: The order of the lesson within the chapter.
              - **lessonName**: The name of the lesson.
            </remarks>
            <returns>return detail list of chapters of classes </returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ChapterController.GetDetailChaptersClassifed(System.Int32)">
            <summary>
             Returns detailed information of each lesson in the chapters classified by class
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            - **grade**: The grade level
            - **chapterOrder**: The order of the chapter in the curriculum.
            - **chapterName**: The name of the chapter.
            - **semester**: semester 
            - **lessons**: A list of lessons within the chapter. Each lesson includes:
              - **lessonOrder**: The order of the lesson within the chapter.
              - **lessonName**: The name of the lesson.
            </remarks>
            <returns>return detail list of chapters of classes classified by class</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.EnrollmentController.GetInfoEnrollmentById(System.Int32)">
             <summary>
             Retrieves all enrollment information for a specific user.
             </summary>
             <remarks>
             *Only logged in users can use this api (including user and admin)*
             This API retrieves enrollment records for a given user, including details such as grade, semester, and academic year.
            
             **Request:**
             The request should include:
             - **id** (int): The unique identifier of the user.
            
             **Response:**
             The response will return a list of enrollment records, each containing:
             - **enrollmentId**: The unique identifier of the enrollment.
             - **userId**: The unique identifier of the user.
             - **grade**: The grade level associated with the enrollment.
             - **enrollmentDate**: The date when the user enrolled.
             - **avgScore**: The average score of the user in this enrollment (nullable).
             - **semester**: The semester in which the user is enrolled.
             - **startYear**: The academic start year.
             - **endYear**: The academic end year.
            
             **Example Request:**
             ```http
             GET /getinfo/id/10
             </remarks>
             <returns>Returns all enrollment records for the specified user.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.EnrollmentController.GetCurrentEnrollmentByUserId(System.Int32)">
             <summary>
             Retrieves the current (most recent) enrollment for a specific user.
             </summary>
             <remarks>
             *Only logged in users can use this api (including user and admin)*
             This API retrieves the most recent enrollment record for a given user based on enrollment date.
            
             **Request:**
             The request should include:
             - **userId** (int): The unique identifier of the user.
            
             **Response:**
             The response will return the most recent enrollment record containing:
             - **enrollmentId**: The unique identifier of the enrollment.
             - **userId**: The unique identifier of the user.
             - **grade**: The grade level associated with the enrollment.
             - **enrollmentDate**: The date when the user enrolled.
             - **avgScore**: The average score of the user in this enrollment (nullable).
             - **semester**: The semester in which the user is enrolled.
             - **startYear**: The academic start year.
             - **endYear**: The academic end year.
            
             **Example Request:**
             ```http
             GET /api/enrollment/current/10
             ```
             </remarks>
             <param name="userId">The ID of the user</param>
             <returns>Returns the most recent enrollment record for the specified user.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.EnrollmentController.UpdateEnrollment(AIMathProject.Application.Dto.EnrollmentDto.EnrollmentDto)">
            <summary>
            Updates an entire enrollment record.
            </summary>
            <remarks>
            *Only logged in users can use this API (including user and admin)*
            This API updates all fields of a specific enrollment record.
            
            **Request:**
            The request should include the full `EnrollmentDto` object.
            
            **Response:**
            The response will return a list of enrollment records, each containing:
            - **enrollmentId**: The unique identifier of the enrollment.
            - **userId**: The unique identifier of the user.
            - **grade**: The grade level associated with the enrollment.
            - **enrollmentDate**: The date when the user enrolled.
            - **avgScore**: The average score of the user in this enrollment (nullable).
            - **semester**: The semester in which the user is enrolled.
            - **startYear**: The academic start year.
            - **endYear**: The academic end year.
            
            **Example Request:**
            ```http
            PUT /api/enrollment/update
            Content-Type: application/json
            {
              "enrollmentId": 12,
              "userId": 10,
              "grade": 2,
              "enrollmentDate": "2024-08-22",
              "avgScore": 8.5,
              "semester": 2,
              "startYear": 2024,
              "endYear": 2025
            }
            </remarks>
            <param name="enrollmentDto">The updated enrollment object.</param>
            <returns>Returns the updated enrollment record.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.EnrollmentController.CreateEnrollment(AIMathProject.Application.Dto.EnrollmentDto.EnrollmentDto)">
            <summary>
            Creates a new enrollment record.
            </summary>
            <remarks>
            *Only logged in users can use this API (including user and admin)*
            This API creates a new enrollment record for a user. If avgScore is not provided, it will default to 0.
            
            **Request:**
            The request should include the `EnrollmentDto` object with required fields.
            
            **Response:**
            The response will return the newly created enrollment record containing:
            - **enrollmentId**: The unique identifier of the new enrollment.
            - **userId**: The unique identifier of the user.
            - **grade**: The grade level associated with the enrollment.
            - **enrollmentDate**: The date when the user enrolled.
            - **avgScore**: The average score of the user in this enrollment (defaults to 0 if not provided).
            - **semester**: The semester in which the user is enrolled.
            - **startYear**: The academic start year.
            - **endYear**: The academic end year.
            
            **Example Request:**
            ```http
            POST /api/enrollment/create
            Content-Type: application/json
            {
              "userId": 10,
              "semester": 2,
              "grade": 3,
              "startYear": 2024,
              "endYear": 2025
            }
            ```
            </remarks>
            <param name="enrollmentDto">The enrollment object to create.</param>
            <returns>Returns the newly created enrollment record.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.EnrollmentUnlockExerciseController.UnlockExercise(System.Int32,System.Int32)">
            <summary>
            Unlocks a specific exercise for a user's enrollment by spending coins.
            </summary>
            <remarks>
            *Only logged-in users can access this API.*
            This API unlocks a specific exercise for the given enrollment by spending 1 coin from the user's wallet.
            
            **Request Parameters:**
            - **enrollmentId** (int): The ID of the enrollment.
            - **exerciseId** (int): The ID of the exercise to unlock.
            
            /// **Example Request:**
            ```http
            POST api/enrollment/8/exercise/401/unlock
            ```
            
            **Response Codes:**
            - **200 OK**: Successfully unlocked the exercise.
            - **400 Bad Request**: Unable to unlock the exercise (see message for details).
            - **401 Unauthorized**: User is not authorized.
            </remarks>
            <param name="enrollmentId">The ID of the enrollment</param>
            <param name="exerciseId">The ID of the exercise to unlock</param>
            <returns>A result indicating success or failure with a message</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseController.GetUnlockExerciseDetail(System.Int32,System.Int32)">
             <summary>
             Retrieves all locked exercises that have been unlocked for a specific enrollment.
             </summary>
             <remarks>
             *Only logged-in users (including user and admin) can access this API.*  
             This API returns a list of premium exercises (IsLocked=true) that have been specifically unlocked for the given enrollment.
            
             **Request Parameters:**  
             - **id** (int): The enrollment ID of the user.
             - **grade** (int): The grade level to filter exercises.
            
             **Response Format:**  
             The response will return a list of unlocked exercises, where each exercise includes:
             - **exerciseName** (string): The name of the exercise.
             - **exerciseId** (int): The unique identifier of the exercise.
             - **isLocked** (boolean): Will always be true, as these are unlocked premium exercises.
             - **description** (string): The description of the exercise.
             - **exerciseDetails** (array): List of exercise details, each containing:
               - **question** (object): Complete question information, including:
                 - **questionId** (int): The unique identifier of the question.
                 - **questionType** (string): The type of question (e.g., "multiple_choice", "fill_in_blank", "matching").
                 - **difficulty** (int): The difficulty level of the question.
                 - **lessonId** (int): The ID of the associated lesson.
                 - **imgUrl** (string): The URL of an image related to the question.
                 - **questionContent** (string): The text content of the question.
                 - **pdfSolution** (string, nullable): A PDF solution reference, if available.
                 - **choiceAnswers** (array): List of multiple-choice answers (for "multiple_choice" questions).
                 - **fillAnswers** (array): List of fill-in answers (for "fill_in_blank" questions).
                 - **matchingAnswers** (array): List of matching answers (for "matching" questions).
            
             **Example Request:**  
             
             GET /api/exercise/detail/enrollment/id/35/grade/1
            
             **Response Codes:**  
             - **200 OK**: Successfully retrieved the unlocked exercises.
             - **400 Bad Request**: No unlocked exercises found for this enrollment.
             </remarks>
             <param name="id">The enrollment ID of the user.</param>
             <param name="grade">The grade level to filter exercises.</param>
             <returns>Returns a list of locked exercises that have been unlocked for the specified enrollment.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseController.GetExerciseByIdWithEnrollmentCheck(System.Int32,System.Int32)">
            <summary>
            Get exercise by ID with enrollment-specific lock status
            </summary>
            <remarks>
            *Authenticated users can access this API*
            
            This API retrieves exercise data and checks if it's unlocked for a specific enrollment.
            If the exercise is locked, it will return basic information without questions.
            If unlocked, it will include all question details.
            
            **Parameters:**
            - **exerciseId**: The unique identifier of the exercise
            - **enrollmentId**: Optional enrollment ID to check unlock status
            </remarks>
            <param name="exerciseId">The unique identifier of the exercise</param>
            <param name="enrollmentId">Optional enrollment ID to check unlock status</param>
            <returns>Exercise data with questions if unlocked</returns>
            <response code="200">Returns the exercise data</response>
            <response code="404">If the exercise is not found</response>
            <response code="401">If the user is not authenticated</response>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseController.GetExercisesWithChapterInfo(System.Int32)">
             <summary>
             Retrieves all exercises with chapter information associated with a specific enrollment ID.
             </summary>
             <remarks>
             *Only logged-in users (including user and admin) can access this API, and this API is for AI support to suggest exercises user needs to improve*  
             This API returns a list of exercises with chapter information for a given enrollment ID.
            
             **Request Parameters:**  
             - **id** (int): The enrollment ID of the user.
            
             **Response Format:**  
             The response will return an array of exercises with the following structure:
             - **exerciseId** (int): The unique identifier of the exercise.
             - **exerciseName** (string): The name of the exercise.
             - **lesson** (object): Information about the lesson:
               - **lessonName** (string): The name of the lesson.
               - **chapter** (object): Information about the chapter:
                 - **chapterId** (int): The unique identifier of the chapter.
                 - **grade** (short): The grade level.
                 - **chapterOrder** (short): The order of the chapter.
                 - **chapterName** (string): The name of the chapter.
                 - **semester** (short): The semester number.
             - **exerciseResults** (array): List of exercise results:
               - **score** (decimal): The score achieved for this exercise.
               - **exerciseDetailResults** (array): List of detail results, each containing:
                 - **isCorrect** (boolean): Whether the answer was correct.
                 - **question** (object): Information about the question:
                   - **difficulty** (short): The difficulty level of the question.
                   - **imgUrl** (string, nullable): The URL of an image related to the question.
                   - **questionContent** (string): The text content of the question.
            
             **Example Response:**  
             ```json
             [
               {
                 "exerciseId": 1,
                 "exerciseName": "Bài tập Vị trí",
                 "lesson": {
                   "lessonName": "Vị trí",
                   "chapter": {
                     "chapterId": 1,
                     "grade": 1,
                     "chapterOrder": 1,
                     "chapterName": "Làm quen với một số hình",
                     "semester": 1
                   }
                 },
                 "exerciseResults": [
                   {
                     "score": 7.5,
                     "exerciseDetailResults": [
                       {
                         "isCorrect": true,
                         "question": {
                           "difficulty": 1,
                           "imgUrl": "https://example.com/image.png",
                           "questionContent": "Đây là biển báo cấm rẽ bên nào"
                         }
                       }
                     ]
                   }
                 ]
               }
             ]
             ```
            
             **Example Request:**  
             
             GET /api/exercise/with-chapter/enrollment/id/8
            
             **Response Codes:**  
             - **200 OK**: Successfully retrieved the exercises with chapter information.  
             - **400 Bad Request**: No exercises found.
             </remarks>
             <param name="id">The enrollment ID of the user.</param>
             <returns>Returns a list of exercises with chapter information for the specified enrollment ID.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseDetailResultController.UpsertExerciseDetailResult(System.Int32,System.Int32,System.Collections.Generic.List{AIMathProject.Application.Dto.ExerciseDetailResultDto.ExerciseDetailResultDto})">
            <summary>
            Creates or updates exercise detail results for a user's enrollment in a specific exercise.
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            This API creates or updates the exercise detail results based on the user's answers.
            
            **Request Parameters:**
            - **id** (int): The enrollment ID of the user.
            - **exerciseid** (int): The exercise id of the exercise.
            - **edrDtoList** (List&lt;ExerciseDetailResultDto&gt;): List of exercise detail results. Each item should include:
              - **questionId** (int): The unique identifier of the question being answered.
              - **isCorrect** (bool): Whether the user's answer is correct or not.
              - **questionType** (string): Type of the question ("multiple_choice", "fill_in_blank", "matching").
              - **userChoiceAnswers** (array, nullable): For multiple_choices questions, contains the user's wrong answers:
                - **answerId** (string): The incorrect answer id provided by the user.
                - **isCorrect** (int): whether the answer is correct or not.
              - **userFillAnswers** (array, optional): For fill_in_blank questions, contains user's wrong answers:
                - **wrongAnswer** (string): The incorrect answer provided by the user.
                - **position** (int): The position of the blank in the question.
            
            **Response Format:**
            - **200 OK**: If the exercise detail results are successfully created or updated, the response will be `true`.
            - **400 Bad Request**: If the operation fails, the response will contain an error message with details on the failure.
            
            **Example Request:**
            ```http
            POST /api/exerciseresult/enrollment/id/8/exercise/id/132
            Content-Type: application/json
            [
              {
                "questionId": 9,
                "isCorrect": true,
                "questionType": "fill_in_blank"  
              },
              {
                "questionId": 10,
                "isCorrect": false,
                "questionType": "fill_in_blank",
                "userFillAnswers": [
                  {
                    "wrongAnswer": "750",
                    "position": 1
                  }
                ]
              },
              {
                "questionId": 11,
                "isCorrect": true,
                "questionType": "multiple_choice"
              },
              {
                "questionId": 12,
                "isCorrect": false,
                "questionType": "multiple_choice",
                 "userChoiceAnswers": [
                   {
                     "answerId": "22",
                     "isCorrect": false
                   }
                 ]
              },
              {
                "questionId": 13,
                "isCorrect": true,
                "questionType": "fill_in_blank"
              }
            ]
            ```
            
            **Example Response (Success):**
            ```json
            HTTP/1.1 200 OK
            true
            ```
            </remarks>
            <returns>Returns `true` if operation succeeds, or a `BadRequest` with an error message if it fails.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseResultController.GetExerciseResultByID(System.Int32,System.Int32)">
            <summary>
            Retrieves the exercise result details associated with a specific enrollment ID and exercise ID.
            </summary>
            <remarks>
            *Only logged in users can use this API (including user and admin)*
            This API returns the detailed information about an exercise result, including the questions and answers.
            
            **Request Parameters:**
            - **id** (int): The enrollment ID of the user.
            - **exerciseid** (int): The unique identifier of the exercise.
            
            **Response Format:**
            The response will return the exercise result details, including:
            - **exerciseId** (int): The unique identifier of the exercise.
            - **enrollmentId** (int): The ID of the enrollment.
            - **score** (decimal, nullable): The score achieved for this exercise.
            - **doneAt** (datetime, nullable): The timestamp when the exercise was completed.
            - **exerciseDetailResults** (array): List of exercise detail results, each containing:
              - **isCorrect** (bool, nullable): Whether the answer is correct or not.
              - **questionType** (string): The type of question ("multiple_choice", "fill_in_blank", "matching").
              - **userChoiceAnswers** (array, nullable): For multiple_choices questions, the user's wrong answers:
                - **answerId** (string): The incorrect answer id provided by the user.
                - **isCorrect** (int): whether the answer is correct or not.
              - **userFillAnswers** (array, nullable): For fill_in_blank questions, the user's wrong answers:
                - **wrongAnswer** (string): The incorrect answer provided by the user.
                - **position** (int): The position of the blank in the question.
              - **exerciseDetail** (object, nullable): Details about the exercise, including:
                - **question** (object, nullable): The complete question information, including:
                  - **questionId** (int): The unique identifier of the question.
                  - **questionType** (string): The type of question (e.g., "multiple_choice").
                  - **difficulty** (int): The difficulty level of the question.
                  - **lessonId** (int): The ID of the associated lesson.
                  - **imgUrl** (string): The URL of an image related to the question.
                  - **questionContent** (string): The text content of the question.
                  - **pdfSolution** (string, nullable): A PDF solution reference, if available.
                  - **choiceAnswers** (array): List of multiple-choice answers.
                  - **fillAnswers** (array): List of fill-in-the-blank answers (if applicable).
                  - **matchingAnswers** (array): List of matching question pairs (if applicable).
            
            **Example Request:**
            ```http
            GET /api/exerciseresult/enrollment/id/11/exercise/id/25
            ```
            </remarks>
            <returns>Returns the exercise result details for the specified enrollment ID and lesson order.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.ExerciseResultController.GetExerciseResultById(System.Int32)">
             <summary>
             Retrieves all exercise results associated with a specific enrollment ID.
             </summary>
             <remarks>
             *Only logged in users can use this API (including user and admin)*
             This API returns a list of exercise results for a given enrollment ID, including details about each exercise result.
            
             **Request Parameters:**
             - **id** (int): The enrollment ID of the user.
            
             **Response Format:**
             The response will return a list of exercise results, where each result includes:
             - **exerciseId** (int): The unique identifier of the exercise.
             - **enrollmentId** (int): The ID of the enrollment.
             - **score** (decimal, nullable): The score achieved for this exercise.
             - **doneAt** (datetime, nullable): The timestamp when the exercise was completed.
             - **exerciseDetailResults** (array): List of exercise detail results, each containing:
               - **isCorrect** (bool, nullable): Whether the answer is correct or not.
               - **questionType** (string): The type of question ("multiple_choice", "fill_in_blank", "matching").
               - **userChoiceAnswers** (array, nullable): For multiple_choices questions, the user's wrong answers:
                 - **answerId** (string): The incorrect answer id provided by the user.
                 - **isCorrect** (int): whether the answer is correct or not.
               - **userFillAnswers** (array, nullable): For fill_in_blank questions, the user's wrong answers:
                 - **wrongAnswer** (string): The incorrect answer provided by the user.
                 - **position** (int): The position of the blank in the question.
               - **exerciseDetail** (object, nullable): Details about the exercise, including:
                 - **question** (object, nullable): The complete question information.
            
             **Example Request:**
             ```http
             GET /api/exerciseresults/enrollment/id/11 
             ```
             </remarks>
             <param name="id">The enrollment ID of the user.</param>
             <returns>Returns a list of exercise results for the specified enrollment ID.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonController.GetLessonByID(System.Int32,System.Int32)">
            <summary>
            Retrieves the details of a lesson associated with a specific grade, chapter, and lesson order.
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            This API returns the details of a lesson, filtered by grade level, chapter order, and lesson order.
            
            **Request Parameters:**
            - **grade** (int): The grade level of the study program.
            - **chapterorder** (int): The sequential order of the chapter.
            - **lessonorder** (int): The sequential order of the lesson within the chapter.
            
            **Response Format:**
            The response will return the details of the lesson, including:
            - **lessonOrder** (short?): The order of the lesson within the chapter. Nullable to allow for optional lesson orders.
            - **lessonName** (string): The name of the lesson.
            - **lessonContent** (string, nullable): The content of the lesson, if available. This can be null if no content is provided.
            
            **Example Request:**
            ```http
            GET /api/lesson/grade/1/chapterorder/1/lessonorder/1
            ```
            </remarks>
            <returns>Returns the lesson details matching the specified grade, chapter order, and lesson order.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonController.CreateLesson(System.Int32,System.Int32,AIMathProject.Application.Dto.LessonDto.LessonDto)">
            <summary>
            Creates a new lesson associated with a specific grade and chapter order.
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            This API creates a new lesson and saves it in the system. The lesson is created with the provided grade level, chapter order, and lesson data.
            
            **Request Parameters:**
            - **grade** (int): The grade level of the study program.
            - **chapterorder** (int): The sequential order of the chapter in the study program.
            - **lessonDto** (LessonDto): The details of the lesson to be created. This should include:
              - **lessonOrder** (short?): The order of the lesson within the chapter.
              - **lessonName** (string): The name of the lesson.
              - **lessonContent** (string, nullable): The content of the lesson (optional).
            
            **Response Format:**
            - **201 Created**: If the lesson is successfully created, the response will include the created `LessonDto` and the URL of the new lesson.
            - **400 Bad Request**: If the lesson could not be created, the response will contain an error message with details on the failure.
            
            **Example Request:**
            ```http
            POST /api/lesson/grade/1/chapter/1
            Content-Type: application/json
            {
              "lessonOrder": 2,
              "lessonName": "Vị trí tiết 2",
              "lessonContent": "linkyoutube"
            }
            **Example Response (Success):**
            ```json
            HTTP/1.1 201 Created
            Location: /api/lesson/grade/1/chapter/1/lessonorder/2
            {
              "lessonOrder": 2,
              "lessonName": "Vị trí tiết 2",
              "lessonContent": "linkyoutube"
            }
            </remarks>
            <returns>Returns a `LessonDto` object representing the created lesson, or a `BadRequest` with an error message if creation fails.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonController.GetLessonByName(System.Int32,System.String)">
            <summary>
            Retrieves the list of lessons for a specific grade and lesson name.
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            This API retrieves all lessons that match a specific grade level and lesson name.
            The search is case-insensitive and ignores accents in the lesson name.
            
            **Request Parameters:**
            - **grade** (int): The grade level of the study program.
            - **lessonname** (string): The name of the lesson to search for. The search will return lessons whose name contains the provided `lessonname`, regardless of case and accents.
            
            **Response Format:**
            The response will return a list of lessons that match the specified criteria, including:
            - **lessonOrder** (short?): The order of the lesson within the chapter.
            - **lessonName** (string): The name of the lesson.
            - **lessonContent** (string, nullable): The content of the lesson, if available. This can be null if no content is provided.
            
            **Example Request:**
            ```http
            GET /api/lesson/grade/1/lessonname/vi tri
            ```
            </remarks>
            <returns>Returns a list of `LessonDto` objects representing the found lessons, or an empty list if no lessons are found.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonController.GetLessonsWithExercises(System.Int32)">
            <summary>
            Retrieves all lessons with their chapters and exercises for a specific grade.
            </summary>
            <remarks>
            *Only logged in users can use this API (including user and admin)*
            This API returns lessons that have exercises associated with them, filtered by grade level.
            Each lesson includes its chapter information and a list of exercises.
            
            **Request Parameters:**
            - **grade** (int): The grade level of the study program.
            
            **Response Format:**
            The response will return a list of lessons with their associated chapters and exercises:
            - **lessonOrder** (short?): The order of the lesson within the chapter.
            - **lessonName** (string): The name of the lesson.
            - **lessonVideoUrl** (string, nullable): The URL to the lesson video, if available.
            - **lessonPdfUrl** (string, nullable): The URL to the lesson PDF, if available.
            - **chapter**: The chapter that contains this lesson.
            - **exercises**: The list of exercises associated with this lesson.
            
            **Example Request:**
            ```http
            GET /api/lessons/grade/1/exercises
            ```
            </remarks>
            <returns>Returns a list of lessons with their chapters and exercises.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonProgressController.GetLessonProgressById(System.Int32)">
            <summary>
            Returns all information of the study program the user has registered for.
            </summary>
            <remarks>
            *Only logged in users can use this api (including user and admin)*
            This API retrieves the user's study program information, including lesson details and learning progress.
            
            **Request:**
            The request should include userID.
            
            **Response:**
            The response will return a list of lessons, each containing:
            - **lessonId**: The unique identifier of the lesson.
            - **learningProgress**: The progress of the user in the lesson (e.g., percentage completed).
            - **isCompleted**: A boolean indicating whether the lesson is completed.
            - **lesson**: An object containing lesson details:
              - **lessonOrder**: The order of the lesson in the study plan.
              - **lessonName**: The name of the lesson.
              - **lessonContent**: The content of the lesson.
              
             **Example Request:**
            ```http
            GET /api/lessonprogress/id/14
            </remarks>
            <returns>Returns all information of the study program the user has registered for.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonProgressController.GetLessonProgressByIdClassified(System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns lesson progress information filtered by chapter's grade and semester.
             </summary>
             <remarks>
             *Only logged in users can use this API (including user and admin)*
             This API retrieves lesson progress information for a specific enrollment, filtered by the chapter's grade and semester.
             
             **Request:**
             The request should include the **enrollment ID**, **grade**, and **semester**.
             
             **Response:**
             The response will return a list of lesson progress records matching the specified grade and semester, each containing:
             - **learningProgressId**: The unique identifier of the progress record.
             - **lessonId**: The unique identifier of the lesson.
             - **status**: The current status of the lesson (not_started, in_progress, completed).
             - **process** (int): The updated progress of the user in the lesson (e.g., 20,30,70).
             - **lesson**: An object containing lesson details:
               - **lessonOrder**: The order of the lesson in the study plan.
               - **lessonName**: The name of the lesson.
               - **lessonVideoUrl**: URL to the lesson's video content.
               - **lessonPdfUrl**: URL to the lesson's PDF content.
            
             **Example Request:**
             ```http
             GET /api/lessonprogress/id/14/grade/3/semester/1
             </remarks>
             <returns>Returns filtered lesson progress information based on chapter's grade and semester.</returns> 
        </member>
        <member name="M:AIMathProject.API.Controllers.LessonProgressController.UpdateLearningProgress(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Updates the learning progress of a specific lesson progress record.
             </summary>
             <remarks>
             *User and admin can use this api*
             This API updates the user's learning progress for a specific lesson.
             
             **Request:**
             The request should include:
             - **lessonID** (int): The unique identifier of the lesson .
             - **enrollmentID** (int): The unique identifier of the enrollment.
             - **status** (int): The status to be updated (0 is not_started, 1 is completed, 2 is in_progress).
             - **process** (int): The updated progress of the user in the lesson (e.g., 20,30,70).
            
             **Response:**
             If successful, the response will return the updated lesson progress information:
             - **learningProgressId**: The unique identifier of the lesson progress.
             - **lessonId**: The unique identifier of the lesson.
             - **status**: The updated progress of the user in the lesson (e.g., completed).
             - **process**: The updated progress of the user in the lesson (e.g., 20,30,70).
             - **lesson**: An object containing lesson details:
               - **lessonOrder**: The order of the lesson in the study plan.
               - **lessonName**: The name of the lesson.
               - **lessonContent**: A link to the lesson content.
            
             **Example Request:**
             ```http
             PATCH /update/lesson/25/enrollment/2/status/2/process/20
             </remarks>
             <returns>Returns the updated learning progress information.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithGoogleController.LoginWithGoogle(System.String)">
             <summary>
             Initiates the login process via Google.
             </summary>
             <remarks>
             This endpoint starts the Google authentication process. It redirects to the Google login page.
             The request should include the `returnUrl` query parameter that will be used after successful authentication.
            
             **Example Request:**
             ```http
             GET /account/login/google?returnUrl=https://example.com/dashboard
             ```
             </remarks>
             <param name="returnUrl">The URL to redirect to after successful login.</param>
             <returns>Returns a challenge to Google authentication.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithGoogleController.GoogleLoginCallback(System.String)">
             <summary>
             Handles the callback from Google after authentication, do not used by front-end
             </summary>
             <remarks>
             This endpoint is triggered after the user has authenticated with Google.
             If authentication is successful, the user's principal is passed to a command for login processing.
             If authentication fails, the request is rejected.
            
             **Example Request:**
             ```http
             GET /account/login/google/callback?returnUrl=https://example.com/dashboard
             ```
             </remarks>
             <param name="returnUrl">The URL to redirect to after successful login.</param>
             <returns>Redirects the user to the return URL if login is successful, or unauthorized if failed.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.RegisterUser(AIMathProject.Domain.Requests.RegisterRequest)">
             <summary>
             Registers a new user account.
             </summary>
             <remarks>
             This API allows the creation of a new user account with the provided registration details.
            
             **Request:**
             The request body must contain the user information:
             - **UserName**: The username for the account.
             - **Email**: The email address associated with the account.
             - **Dob**: The date of birth of the user.
             - **PhoneNumber**: The phone number of the user.
             - **Password**: The password for the account(Consists of at least 8 characters, with uppercase and lowercase letters).
            
             **Example Request:**
             ```http
             POST /account/register/user
             Content-Type: application/json
             {
                 "UserName": "john_doe",
                 "Email": "john.doe@example.com",
                 "Dob": "1990-01-01T00:00:00",
                 "PhoneNumber": "0909909090",
                 "Password": "securepasswordAa"
             }
             ```
             </remarks>
             <param name="registerRequest">The registration details for the user.</param>
             <returns>Returns a success response if the registration was successful.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.RegisterAdmin(AIMathProject.Domain.Requests.RegisterRequest)">
             <summary>
             Registers a new admin account.
             </summary>
             <remarks>
             This API allows the creation of a new admin account with the provided registration details.
            
             **Request:**
             The request body must contain the admin information:
             - **UserName**: The username for the account.
             - **Email**: The email address associated with the account.
             - **Gender**: The gender of the admin.
             - **Dob**: The date of birth of the admin.
             - **Avatar**: The avatar image URL for the admin.
             - **Password**: The password for the account(Consists of at least 8 characters, with uppercase and lowercase letters).
             - **Status**: The status of the account (active/inactive).
            
             **Example Request:**
             ```http
             POST /account/register/admin
             Content-Type: application/json
             {
                 "UserName": "admin_john",
                 "Email": "admin.john@example.com",
                 "Dob": "1985-01-01T00:00:00",
                 "PhoneNumber": "0909909090",
                 "Password": "adminpassword"
             }
             ```
             </remarks>
             <param name="registerRequest">The registration details for the admin.</param>
             <returns>Returns a success response if the registration was successful.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.Login(AIMathProject.Domain.Requests.LoginRequest)">
             <summary>
             Logs in a user and returns JWT and refresh tokens.
             </summary>
             <remarks>
             This API handles user login by verifying credentials and issuing tokens.
            
             **Request:**
             The request body must contain the login information:
             - **Email**: The user's email address.
             - **Password**: The user's password.
            
             **Example Request:**
             ```http
             POST /account/login
             Content-Type: application/json
             {
                 "Email": "michael.brown@example.com",
                 "Password": "Michael@101"
             }
             ```
             </remarks>
             <param name="loginRequest">The login details for the user.</param>
             <returns>Returns JWT and refresh tokens if the login is successful and it saved in cookies</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.RefreshToken(System.String)">
             <summary>
             Refreshes a JWT token using a refresh token and returns a new JWT token and refresh token.
             </summary>
             <remarks>
             This API allows a client to refresh an expired JWT token by providing a valid refresh token.
             A new JWT token and a new refresh token will be issued if the provided refresh token is valid.
            
             **Request:**
             The request body must contain the refresh token:
             - **refreshTokenRequest**: The refresh token previously issued to the client.
            
             **Example Request:**
             ```http
             POST /api/account/refresh-token
             Content-Type: application/json
             {
                 "refreshTokenRequest": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
             }
             </remarks>
             <param name="refreshTokenRequest">The refresh token provided by the client to obtain a new JWT token.</param>
             <returns>
             Returns a new JWT token and a new refresh token if the refresh token is valid.
             Returns a 400 Bad Request if the refresh token is null or empty.
             </returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.ForgotPassword(System.String,System.String)">
            <summary>
            Initiates the forgot password process by sending a reset password link to the user's email.
            </summary>
            <param name="email">The email address of the user requesting a password reset.</param>
            <param name="host">The host URL used to construct the password reset link (e.g., "http://localhost:5173/forgot-password").</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> if the reset password request is successfully initiated,
            or a <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> if an error occurs during the process.
            </returns>
            <remarks>
            - This endpoint does not require authentication.
            - The <paramref name="host"/> parameter should be the base URL of the frontend application
              where the user will be redirected to reset their password.
            - If the email is not found or an error occurs, a bad request response is returned with an error message.
            </remarks>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.ResetPassword(AIMathProject.Application.Dto.ResetPasswordModel)">
            <summary>
            Initiates the forgot password process by sending a reset password link to the user's email.
            </summary>
            <param name="email">The email address of the user requesting a password reset.</param>
            <param name="host">The host URL used to construct the password reset link (e.g., "http://localhost:5173/forgot-password").</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> if the reset password request is successfully initiated,
            or a <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> if an error occurs during the process.
            </returns>
            <remarks>
            - This endpoint does not require authentication.
            - The <paramref name="host"/> parameter should be the base URL of the frontend application
              where the user will be redirected to reset their password.
            - If the email is not found or an error occurs, a bad request response is returned with an error message.
            - Frontend code reference: https://drive.google.com/drive/folders/18M__nFfmDoVOyqHElTmNdyTL7PiEfbXX?usp=sharing
            </remarks>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.ConfirmEmail(System.String,System.String)">
            <summary>
            This API uses a callback when the user clicks on the email confirmation link. This API is not used by the front-end.
            </summary>
            <param name="userId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.TestAuthentication">
            <summary>
            Api test if user logged(Both admin and user)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.TestAdminOnly">
            <summary>
            This API is used to test users who have logged in and have the Role of Admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LoginWithUSPW.TestUserRole">
            <summary>
            This API is used to test users who have logged in and have the Role of user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.LogoutController.Logout">
             <summary>
             Logs out the current user by invalidating tokens and ending the session.
             </summary>
             <remarks>
             This API handles user logout by:
             - Invalidating refresh tokens
             - Clearing authentication cookies
             - Recording session end time for analytics
            
             **Example Request:**
             ```http
             POST /account/logout
             Authorization: Bearer {your-jwt-token}
             ```
             </remarks>
             <returns>Returns a success message upon successful logout</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.CreatePaymentPlansUrlVnPay(System.Int32,System.Int32)">
             <summary>
             Generates a VnPay payment URL for purchasing a study plan.
             </summary>
             <remarks>
             *Only logged in users can use this api*
             This API creates a VnPay payment URL for a specific study plan purchase by a user.
            
             **Request:**
             Send a request with the following route parameters:
             - **idPlan**: The ID of the study plan to be purchased.
             - **idUser**: The ID of the user making the payment.
            
             **Example Request:**
             ```http
             POST /payment/plan/2/user/1
             ```
            
             **Response:**
             ```json
             {
                 "paymentUrl": "https://sandbox.vnpayment.vn/payment/link-to-pay"
             }
             ```
             </remarks>
             <param name="idPlan">The ID of the study plan.</param>
             <param name="idUser">The ID of the user making the payment.</param>
             <returns>Returns a VnPay payment URL to redirect the user for payment.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.PaymentCallBackVnPay">
            <summary>
            Handles the VnPay payment callback and displays the payment result.
            Used only by back-end, front-end doesn't care     
            </summary>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.CreatePaymentTokenPackage(System.Int32,System.Int32)">
             <summary>
             Creates a payment for a token package purchase.
             </summary>
             <remarks>
             *Only logged in users can use this API*
             This API initiates a payment process for a specific token package purchase by a user.
            
             **Request:**
             Send a request with the following route parameters:
             - **tokenPackageId**: The ID of the token package to be purchased.
             - **userId**: The ID of the user making the payment.
             
             /// **Example Request:**
             ```http
             POST /payment/token/1/user/1
             ```
             
             </remarks>
             <param name="tokenPackageId">The ID of the token package.</param>
             <param name="userId">The ID of the user making the payment.</param>
             <returns>Returns string to know success or fail</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.GetLatestInforUserPaymentById(System.Int32)">
             <summary>
             Retrieve the latest payment information for a specific user.
             </summary>
             <remarks>
             *Only logged in users can use this api*  
             This API fetches the latest payment details associated with a given user ID, including payment method, plan, and token package information (if available).  
             The response includes data such as payment ID, method ID, user ID, plan details, and transaction information.  
            
             **Request:**  
             Send a request with the following route parameter:  
             - **userId**: The ID of the user whose payment information is to be retrieved.  
            
             **Example Request:**  
             ```http
             GET /api/payment/user/1
             ``` 
             </remarks>
             <param name="userId">The ID of the user whose payment information is to be retrieved.</param>
             <returns>Returns the payment details for the user or an error if no data is found.</returns>
             <response code="200">Returns the payment information successfully.</response>
             <response code="404">Indicates that no payment information was found for the given user ID.</response>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.GetAllInforUserPaymentById(System.Int32)">
             <summary>
             Retrieves all payment information for a specific user.
             </summary>
             <remarks>
             *Only logged in users can use this api*  
             This API fetches the latest payment details associated with a given user ID, including payment method, plan, and token package information (if available).  
             The response includes data such as payment ID, method ID, user ID, plan details, and transaction information.  
            
             **Request:**  
             Send a request with the following route parameter:  
             - **userId**: The ID of the user whose payment information is to be retrieved.  
            
             **Example Request:**  
             ```http
             GET /api/payment/user/1/all
             ``` 
             </remarks>
             <param name="userId">The ID of the user whose payment information is to be retrieved.</param>
             <returns>Returns the payment details for the user or an error if no data is found.</returns>
             <response code="200">Returns the payment information successfully.</response>
             <response code="404">Indicates that no payment information was found for the given user ID.</response>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentController.GetAllPaymentsPaginated(System.Int32,System.Int32)">
            <summary>
            Get all system payments with pagination
            </summary>
            <remarks>
            *Only admin users can access this API*
            
            This API retrieves all payment records in the system with pagination support.
            Results are ordered by date in descending order (most recent first).
            
            **Path Parameters:**
            - **pageIndex**: Zero-based page index (0 for first page)
            - **pageSize**: Number of items per page (recommended: 10-50)
            
            **Example Requests:**
            - First page with 10 items: `/api/payments/pageindex/0/pagesize/10`
            - Second page with 20 items: `/api/payments/pageindex/1/pagesize/20`
            </remarks>
            <param name="pageIndex">Zero-based page index (0 for first page)</param>
            <param name="pageSize">Number of items per page</param>
            <returns>A list of all payments matching the filter criteria</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.PaymentMethodController.GetAllPaymentMethod">
            <summary>
            Only logged user can use this api (include admin and user).
            This API return all Payment method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.PlanController.GetAllPlan">
            <summary>
            Only logged user can use this api (include user or admin).
            This api return all plan to user buy it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.QuestionController.GetQuestionByGrade(System.Int32,System.Int32)">
             <summary>
             Retrieves all questions associated with a specific grade and lesson order.
             </summary>
             <remarks>
             *Only logged in users can use this api (including user and admin)*
             This API returns a list of questions for a given study program, filtered by grade level and lesson order.
            
             **Request Parameters:**
             - **grade** (int): The grade level of the study program.
             - **lessonOrder** (int): The sequential order of the lesson.
            
             **Response Format:**
             The response will return a list of questions, each containing:
             - **questionId** (int): The unique identifier of the question.
             - **questionType** (string): The type of question (e.g., "multiple_choice", "fill_in_blank", "matching").
             - **difficulty** (int): The difficulty level of the question.
             - **lessonId** (int): The identifier of the associated lesson.
             - **imgUrl** (string, nullable): The URL of an image related to the question.
             - **questionContent** (string): The text content of the question.
             - **pdfSolution** (string, nullable): A PDF solution reference, if available.
             - **choiceAnswers** (array): List of multiple-choice answers (if applicable):
               - **answerId** (int): The unique identifier of the answer choice.
               - **content** (string, nullable): The text of the answer choice (if applicable).
               - **isCorrect** (bool): Whether this choice is the correct answer.
               - **imgUrl** (string, nullable): An optional image URL for the answer choice.
             - **fillAnswers** (array): List of correct answers for fill-in-the-blank questions (if applicable):
               - **answerId** (int): The unique identifier of the correct answer.
               - **correctAnswer** (string): The correct text answer that should be filled in.
               - **position** (short): The position of the blank in the question (for multi-blank questions).
             - **matchingAnswers** (array): List of matching question pairs (if applicable):
               - **answerId** (int): The unique identifier of the matching answer.
               - **correctAnswer** (string): The correct match for the question.
               - **imgUrl** (string, nullable): An image URL representing the matching item.
            
             **Example Request:**
             ```http
             GET /api/question/grade/1/lessonorder/1
             ```
             </remarks>
             <returns>Returns a list of questions matching the specified grade and lesson order.</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.TokenPackageController.GetAllTokenPackage">
            <summary>
            Only logged user can use this api.
            This API return all token package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserController.GetInfoUser(System.Int32,System.Int32)">
            <summary>
            Retrieves a paginated list of user information, accessible only to users with Admin privileges.
            </summary>
            <param name="pageindex">The index of the page to retrieve (starting from 0).</param>
            <param name="pagesize">The number of users to include per page.</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> containing a <see cref="T:AIMathProject.Application.Dto.Pagination.Pagination`1"/> object with the paginated list of users.
            </returns>
            <remarks>
            - This endpoint requires the caller to be authenticated and have the "Admin" role.
            </remarks>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserController.GetInfoUserLogin">
            <summary>
            This api used to get information of currently logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserController.GetUsersWithFilters(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Int32,System.Int32)">
             <summary>
             Gets users with advanced filtering and searching capabilities
             </summary>
             <remarks>
             *Only administrators can use this API*
             
             **Functionality:**
             - Search users by email or username (case-insensitive matching)
             - Filter users by role (1 for User, 2 for Admin)
             - Filter users by status (true for active, false for inactive)
             - All filters are optional - leave empty to skip filtering
             - Results are paginated and ordered alphabetically by username
            
             **Request:**
             The request can include the following query parameters:
             - **searchTerm** (optional): Text to search in email and username fields
             - **role** (optional): Filter by user role (1 for User, 2 for Admin)
             - **status** (optional): Filter by account status (true for active, false for inactive)
             - **pageindex**: The page index (starts from 0)
             - **pagesize**: Number of records per page
            
             **Response:**
             The response will return a paginated list of users:
             - **pageIndex**: Current page index
             - **pageSize**: Number of items per page
             - **totalCount**: Total number of matching users
             - **items**: Array of user objects containing id, userName, email, phoneNumber, gender, dob, avatar, and status
            
             **Example Requests:**
             ```
             GET /api/user/filter?pageindex=0&amp;pagesize=10
             GET /api/user/filter?searchTerm=john&amp;role=1&amp;status=true&amp;pageindex=0&amp;pagesize=10
             ```
             </remarks>
             <param name="searchTerm">Text to search in email and username fields</param>
             <param name="role">Filter by user role (1 for User, 2 for Admin)</param>
             <param name="status">Filter by account status (true for active, false for inactive)</param>
             <param name="pageindex">The page index (starts from 0)</param>
             <param name="pagesize">Number of records per page</param>
             <returns>Returns a paginated list of users matching the search and filter criteria</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserController.DeleteUser(System.String)">
            <summary>
            Deletes a user by their email, accessible only to users with Admin privileges.
            </summary>
            <param name="email">The email of the user to delete.</param>
            <remarks>
            - This endpoint requires the caller to be authenticated and have the "Admin" role.
            </remarks>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserController.UpdateUser(AIMathProject.Domain.Requests.UpdateRequest)">
            <summary>
            Updates a user by their ID, accessible only to users with Admin privileges.
            </summary>
            <param name="request">The update request containing the fields to update.</param>
            <returns>
            Returns a <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> if the user was successfully updated, or a <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if the user was not found.
            </returns>
            <remarks>
            - This endpoint requires the caller to be authenticated and have the  role.
            </remarks>
        </member>
        <member name="M:AIMathProject.API.Controllers.UserStatisticsController.GetUserStatistics(System.String)">
            <summary>
            Get user statistics for a specific time period
            </summary>
            <remarks>
            This API retrieves comprehensive user statistics based on the specified time period.
            
            **Period Types:**
            - **day**: Statistics for the current day compared to the previous day
            - **week**: Statistics for the current week compared to the previous week
            - **month**: Statistics for the current month compared to the previous month
            - **year**: Statistics for the current year compared to the previous year
            
            **Response includes:**
            - User count statistics (current period, previous period, growth rate)
            - User engagement metrics (average usage time in minutes, change rate)
            - Daily breakdown of user activity
            
            **Example Request:**
            ```http
            GET /api/users/statistics/week
            ```
            </remarks>
            <param name="periodType">The time period type ('day', 'week', 'month', or 'year')</param>
            <returns>Returns detailed user statistics for the specified period</returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.WalletController.GetWalletByUserId(System.Int32)">
            <summary>
            Get a wallet by user ID.
            </summary>
            <param name="UserId"></param>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.WalletController.UpdateTokenUsed(AIMathProject.Application.Dto.UpdateWalletRequests.UpdateWalletRequest)">
            <summary>
            Update the amount of tokens used in a wallet.
            </summary>
            <param name="walletId"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.API.Controllers.WalletController.UpdateCoinUsed(AIMathProject.Application.Dto.UpdateWalletRequests.UpdateWalletRequest)">
            <summary>
            Update the amount of coins used in a wallet.
            </summary>
            <param name="walletId"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:AIMathProject.Api.Controllers.RevenueStatisticsController.GetRevenueStatistics(System.String)">
            <summary>
            Get revenue statistics for a specific time period
            </summary>
            <remarks>
            *Only admin users can access this API*
            
            This API retrieves comprehensive revenue statistics based on the specified time period.
            
            **Period Types:**
            - **day**: Statistics for the current day compared to the previous day
            - **week**: Statistics for the current week compared to the previous week
            - **month**: Statistics for the current month compared to the previous month
            - **year**: Statistics for the current year compared to the previous year
            
            **Response includes:**
            - **currentRevenue**: Total revenue for the current period
            - **previousRevenue**: Total revenue for the previous equivalent period
            - **growthRate**: Percentage change between current and previous period
            - **period**: Details about the time period including start date, end date, and period type
            
            **Example Request:**
            ```http
            GET /api/revenue/statistics/period/month
            ```
            </remarks>
            <param name="periodType">The time period type (day, week, month, year)</param>
            <returns>Revenue statistics for the specified period</returns>
        </member>
        <member name="M:AIMathProject.Api.Controllers.RevenueStatisticsController.GetDailyRevenueByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get daily revenue by date range with specific time
            </summary>
            
            /// **Example Request:**
            ```http
            GET /api/dailyrevenue/startdate/2023-05-01T08:30:00/enddate/2023-05-31T17:45:00
            ```
            <param name="startDateTime">Start date and time (format: yyyy-MM-ddTHH:mm:ss)</param>
            <param name="endDateTime">End date and time (format: yyyy-MM-ddTHH:mm:ss)</param>
            <returns>List of daily revenue data</returns>
        </member>
    </members>
</doc>
